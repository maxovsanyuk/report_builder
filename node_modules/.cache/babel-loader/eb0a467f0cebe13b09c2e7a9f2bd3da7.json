{"ast":null,"code":"var _jsxFileName = \"/Users/admin/UDS/addons-reportbuilder/src/components/Sidebar/SidebarData/NewEntities.js\";\nimport React, { useEffect, useState } from \"react\";\nimport { savedNewDataSetSettings, setLoading, setNewDataSetState } from \"../../../redux/actions/app_action\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { getDataSetFields } from \"../../../services/get-fields\";\nimport styled from \"styled-components\"; // MATERIAL UI\n\nimport Paper from \"@material-ui/core/Paper\";\nimport isEmpty from \"lodash/isEmpty\";\nimport FormControl from \"@material-ui/core/FormControl\";\nimport InputLabel from \"@material-ui/core/InputLabel\";\nimport Select from \"@material-ui/core/Select\";\nimport MenuItem from \"@material-ui/core/MenuItem\";\nimport Button from \"@material-ui/core/Button\";\nimport get from \"lodash/get\";\nimport IconButton from \"@material-ui/core/IconButton\";\nimport AddIcon from \"@material-ui/icons/Add\";\nimport DeleteIcon from \"@material-ui/icons/Delete\";\nimport FilterForNewDataSet from \"./views/FilterForNewDataSet\";\nimport ModalDataSetFields from \"../modals/ModalDataSetFields\";\nconst DataSetListComp = styled.div`\n  .parameter {\n    display: flex;\n    justify-content: space-between;\n    padding-left: 10px;\n    border: 1px solid grey;\n    border-radius: 5px;\n    align-items: center;\n    margin-bottom: 10px;\n\n    p {\n      margin: 0;\n    }\n  }\n`;\n\nconst NewEntities = ({\n  entitie,\n  register,\n  control,\n  isFullEntitie,\n  setIsFullEntitie\n}) => {\n  var _entitiState$filtersL, _entitiState$selectTy2, _entitiState$dataSetF, _entitiState$dataSetF2, _newDataSet$entities3;\n\n  const [entitiState, setEntitiState] = useState(entitie);\n  const [logicalTypeName, setLogicalTypeName] = useState(\"\");\n  const [isModalOpen, setIsMadalOpen] = useState(false);\n  const state = useSelector(state => state.app);\n  const {\n    newDataSet\n  } = state;\n  const dispatch = useDispatch();\n  const checkedFilters = get(entitiState, \"filtersList\") && (entitiState === null || entitiState === void 0 ? void 0 : (_entitiState$filtersL = entitiState.filtersList) === null || _entitiState$filtersL === void 0 ? void 0 : _entitiState$filtersL.filter(f => get(f, \"checked\")));\n  useEffect(() => {\n    setEntitiState({ ...entitie\n    });\n\n    async function getDataSetFieldsList() {\n      dispatch(setLoading(true));\n      dispatch(savedNewDataSetSettings(false));\n\n      try {\n        var _entitiState$selectTy, _newDataSet$entities;\n\n        const dataSetFields = await getDataSetFields(entitiState === null || entitiState === void 0 ? void 0 : (_entitiState$selectTy = entitiState.selectType) === null || _entitiState$selectTy === void 0 ? void 0 : _entitiState$selectTy.logicalName);\n        setEntitiState({ ...entitiState,\n          dataSetFields\n        });\n        dispatch(setNewDataSetState({ ...newDataSet,\n          entities: newDataSet === null || newDataSet === void 0 ? void 0 : (_newDataSet$entities = newDataSet.entities) === null || _newDataSet$entities === void 0 ? void 0 : _newDataSet$entities.map(e => {\n            return e.id === (entitiState === null || entitiState === void 0 ? void 0 : entitiState.id) ? { ...entitiState,\n              dataSetFields,\n              filtersList: [],\n              checkedFilters: 0\n            } : e;\n          })\n        }));\n        dispatch(setLoading(false));\n      } catch (e) {\n        console.log(e);\n      }\n    }\n\n    logicalTypeName && getDataSetFieldsList();\n  }, [logicalTypeName]);\n  useEffect(() => {\n    var _newDataSet$entities2;\n\n    dispatch(setNewDataSetState({ ...newDataSet,\n      entities: newDataSet === null || newDataSet === void 0 ? void 0 : (_newDataSet$entities2 = newDataSet.entities) === null || _newDataSet$entities2 === void 0 ? void 0 : _newDataSet$entities2.map(e => {\n        return e.id === (entitiState === null || entitiState === void 0 ? void 0 : entitiState.id) ? { ...entitiState\n        } : e;\n      })\n    }));\n  }, [get(entitiState, \"filterChangedId\") && entitiState.filterChangedId, get(entitiState, \"filtersList\") && entitiState.filtersList.length, get(entitiState, \"dataSetFields.id\")]);\n  return /*#__PURE__*/React.createElement(DataSetListComp, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 119,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(Paper, {\n    style: {\n      margin: \"20px 0\",\n      padding: \"15px\"\n    },\n    elevation: 3,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 120,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    style: {\n      display: \"flex\",\n      justifyContent: \"space-between\",\n      alignItems: \"flex-end\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 127,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(FormControl, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 134,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(InputLabel, {\n    htmlFor: \"select-label\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 135,\n      columnNumber: 13\n    }\n  }, \"Type*\"), /*#__PURE__*/React.createElement(Select, {\n    name: \"selectType\",\n    inputRef: register,\n    control: control,\n    value: (entitiState === null || entitiState === void 0 ? void 0 : (_entitiState$selectTy2 = entitiState.selectType) === null || _entitiState$selectTy2 === void 0 ? void 0 : _entitiState$selectTy2.label) || \"\",\n    renderValue: () => {\n      var _entitiState$selectTy3;\n\n      return /*#__PURE__*/React.createElement(\"div\", {\n        style: {\n          maxWidth: \"100px\",\n          overflow: \"hidden\",\n          textOverflow: \"ellipsis\"\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 144,\n          columnNumber: 19\n        }\n      }, entitiState === null || entitiState === void 0 ? void 0 : (_entitiState$selectTy3 = entitiState.selectType) === null || _entitiState$selectTy3 === void 0 ? void 0 : _entitiState$selectTy3.label);\n    },\n    style: {\n      minWidth: \"100px\"\n    },\n    onChange: e => {\n      setEntitiState({ ...entitiState,\n        selectType: e.target.value,\n        filtersList: []\n      });\n      setIsFullEntitie(true);\n      setLogicalTypeName(e.target.value.logicalName);\n    },\n    required: true,\n    inputProps: {\n      id: \"select-label\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 137,\n      columnNumber: 13\n    }\n  }, !isEmpty(entitie === null || entitie === void 0 ? void 0 : entitie.dataSetTypes) && (entitie === null || entitie === void 0 ? void 0 : entitie.dataSetTypes.items.map(i => {\n    return /*#__PURE__*/React.createElement(MenuItem, {\n      key: i.logicalName,\n      value: i,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 176,\n        columnNumber: 21\n      }\n    }, i.label);\n  })))), get(entitiState, \"selectType\") && /*#__PURE__*/React.createElement(\"div\", {\n    style: {\n      display: \"flex\",\n      alignItems: \"center\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 184,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(Button, {\n    onClick: () => setIsMadalOpen(true),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 190,\n      columnNumber: 15\n    }\n  }, \"Choose fields (\", get(entitiState, \"dataSetFields\") && ((_entitiState$dataSetF = entitiState.dataSetFields) === null || _entitiState$dataSetF === void 0 ? void 0 : (_entitiState$dataSetF2 = _entitiState$dataSetF.items) === null || _entitiState$dataSetF2 === void 0 ? void 0 : _entitiState$dataSetF2.filter(i => i.chosen).length) || 0, \")\"), /*#__PURE__*/React.createElement(IconButton, {\n    disabled: get(entitiState, \"filtersList\") && get(entitiState, \"filtersList\").length && !isFullEntitie,\n    onClick: () => {\n      setEntitiState({ ...entitiState,\n        filterChangedId: new Date().getTime(),\n        filtersList: get(entitiState, \"filtersList\") ? [...(entitiState === null || entitiState === void 0 ? void 0 : entitiState.filtersList), {\n          filterId: new Date().getTime()\n        }] : [{\n          filterId: new Date().getTime()\n        }]\n      });\n      setIsFullEntitie(false);\n    },\n    color: \"primary\",\n    component: \"span\",\n    style: {\n      margin: \"0 0 0 20px\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 199,\n      columnNumber: 15\n    }\n  }, /*#__PURE__*/React.createElement(AddIcon, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 224,\n      columnNumber: 17\n    }\n  })), (newDataSet === null || newDataSet === void 0 ? void 0 : (_newDataSet$entities3 = newDataSet.entities) === null || _newDataSet$entities3 === void 0 ? void 0 : _newDataSet$entities3.length) > 1 && /*#__PURE__*/React.createElement(IconButton, {\n    onClick: () => {\n      dispatch(setNewDataSetState({ ...newDataSet,\n        entities: newDataSet === null || newDataSet === void 0 ? void 0 : newDataSet.entities.filter(e => (e === null || e === void 0 ? void 0 : e.id) !== (entitie === null || entitie === void 0 ? void 0 : entitie.id))\n      }));\n      setIsFullEntitie(true);\n    },\n    component: \"span\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 227,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(DeleteIcon, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 241,\n      columnNumber: 19\n    }\n  })))), get(entitiState, \"checkedFilters\") && (entitiState === null || entitiState === void 0 ? void 0 : entitiState.checkedFilters) > 1 ? /*#__PURE__*/React.createElement(\"div\", {\n    style: {\n      margin: \"15px 0 5px 0\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 250,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(Button, {\n    variant: \"contained\",\n    size: \"small\",\n    color: \"primary\",\n    style: {\n      margin: \"0 10px 0 0\"\n    },\n    onClick: () => {\n      var _entitiState$filtersL2;\n\n      checkedFilters.length && setEntitiState({ ...entitiState,\n        checkedFilters: 0,\n        filtersList: [...(entitiState === null || entitiState === void 0 ? void 0 : (_entitiState$filtersL2 = entitiState.filtersList) === null || _entitiState$filtersL2 === void 0 ? void 0 : _entitiState$filtersL2.filter(f => !f.checked)), {\n          filterId: new Date().getTime(),\n          items: [...checkedFilters],\n          logicalType: \"or\"\n        }]\n      });\n      setIsFullEntitie(true);\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 251,\n      columnNumber: 13\n    }\n  }, \"Or\"), /*#__PURE__*/React.createElement(Button, {\n    variant: \"contained\",\n    size: \"small\",\n    color: \"primary\",\n    onClick: () => {\n      var _entitiState$filtersL3;\n\n      checkedFilters.length && setEntitiState({ ...entitiState,\n        checkedFilters: 0,\n        filtersList: [...(entitiState === null || entitiState === void 0 ? void 0 : (_entitiState$filtersL3 = entitiState.filtersList) === null || _entitiState$filtersL3 === void 0 ? void 0 : _entitiState$filtersL3.filter(f => !f.checked)), {\n          filterId: new Date().getTime(),\n          items: [...checkedFilters],\n          logicalType: \"and\"\n        }]\n      });\n      setIsFullEntitie(true);\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 276,\n      columnNumber: 13\n    }\n  }, \"And\")) : null, /*#__PURE__*/React.createElement(\"div\", {\n    style: {\n      display: \"flex\",\n      flexDirection: \"column\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 302,\n      columnNumber: 9\n    }\n  }, get(entitiState, \"filtersList\") && get(entitiState, \"filtersList\").length ? entitiState === null || entitiState === void 0 ? void 0 : entitiState.filtersList.map(f => {\n    return /*#__PURE__*/React.createElement(FilterForNewDataSet, {\n      entitiState: entitiState,\n      setEntitiState: setEntitiState,\n      isFullEntitie: isFullEntitie,\n      setIsFullEntitie: setIsFullEntitie,\n      register: register,\n      control: control,\n      key: get(f, \"filterId\"),\n      filterData: f,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 312,\n        columnNumber: 19\n      }\n    });\n  }) : null)), isModalOpen && /*#__PURE__*/React.createElement(ModalDataSetFields, {\n    entitiState: entitiState,\n    setEntitiState: setEntitiState,\n    setIsMadalOpen: setIsMadalOpen,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 329,\n      columnNumber: 9\n    }\n  }));\n};\n\nNewEntities.defaultProps = {};\nexport default NewEntities;","map":{"version":3,"sources":["/Users/admin/UDS/addons-reportbuilder/src/components/Sidebar/SidebarData/NewEntities.js"],"names":["React","useEffect","useState","savedNewDataSetSettings","setLoading","setNewDataSetState","useDispatch","useSelector","getDataSetFields","styled","Paper","isEmpty","FormControl","InputLabel","Select","MenuItem","Button","get","IconButton","AddIcon","DeleteIcon","FilterForNewDataSet","ModalDataSetFields","DataSetListComp","div","NewEntities","entitie","register","control","isFullEntitie","setIsFullEntitie","entitiState","setEntitiState","logicalTypeName","setLogicalTypeName","isModalOpen","setIsMadalOpen","state","app","newDataSet","dispatch","checkedFilters","filtersList","filter","f","getDataSetFieldsList","dataSetFields","selectType","logicalName","entities","map","e","id","console","log","filterChangedId","length","margin","padding","display","justifyContent","alignItems","label","maxWidth","overflow","textOverflow","minWidth","target","value","dataSetTypes","items","i","chosen","Date","getTime","filterId","checked","logicalType","flexDirection","defaultProps"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;AAEA,SACEC,uBADF,EAEEC,UAFF,EAGEC,kBAHF,QAIO,mCAJP;AAMA,SAASC,WAAT,EAAsBC,WAAtB,QAAyC,aAAzC;AACA,SAASC,gBAAT,QAAiC,8BAAjC;AAEA,OAAOC,MAAP,MAAmB,mBAAnB,C,CAEA;;AAEA,OAAOC,KAAP,MAAkB,yBAAlB;AACA,OAAOC,OAAP,MAAoB,gBAApB;AACA,OAAOC,WAAP,MAAwB,+BAAxB;AACA,OAAOC,UAAP,MAAuB,8BAAvB;AACA,OAAOC,MAAP,MAAmB,0BAAnB;AACA,OAAOC,QAAP,MAAqB,4BAArB;AACA,OAAOC,MAAP,MAAmB,0BAAnB;AACA,OAAOC,GAAP,MAAgB,YAAhB;AACA,OAAOC,UAAP,MAAuB,8BAAvB;AACA,OAAOC,OAAP,MAAoB,wBAApB;AACA,OAAOC,UAAP,MAAuB,2BAAvB;AAEA,OAAOC,mBAAP,MAAgC,6BAAhC;AACA,OAAOC,kBAAP,MAA+B,8BAA/B;AAEA,MAAMC,eAAe,GAAGd,MAAM,CAACe,GAAI;;;;;;;;;;;;;;CAAnC;;AAgBA,MAAMC,WAAW,GAAG,CAAC;AACnBC,EAAAA,OADmB;AAEnBC,EAAAA,QAFmB;AAGnBC,EAAAA,OAHmB;AAInBC,EAAAA,aAJmB;AAKnBC,EAAAA;AALmB,CAAD,KAMd;AAAA;;AACJ,QAAM,CAACC,WAAD,EAAcC,cAAd,IAAgC9B,QAAQ,CAACwB,OAAD,CAA9C;AACA,QAAM,CAACO,eAAD,EAAkBC,kBAAlB,IAAwChC,QAAQ,CAAC,EAAD,CAAtD;AACA,QAAM,CAACiC,WAAD,EAAcC,cAAd,IAAgClC,QAAQ,CAAC,KAAD,CAA9C;AAEA,QAAMmC,KAAK,GAAG9B,WAAW,CAAE8B,KAAD,IAAWA,KAAK,CAACC,GAAlB,CAAzB;AACA,QAAM;AAAEC,IAAAA;AAAF,MAAiBF,KAAvB;AACA,QAAMG,QAAQ,GAAGlC,WAAW,EAA5B;AAEA,QAAMmC,cAAc,GAClBxB,GAAG,CAACc,WAAD,EAAc,aAAd,CAAH,KACAA,WADA,aACAA,WADA,gDACAA,WAAW,CAAEW,WADb,0DACA,sBAA0BC,MAA1B,CAAkCC,CAAD,IAAO3B,GAAG,CAAC2B,CAAD,EAAI,SAAJ,CAA3C,CADA,CADF;AAIA3C,EAAAA,SAAS,CAAC,MAAM;AACd+B,IAAAA,cAAc,CAAC,EAAE,GAAGN;AAAL,KAAD,CAAd;;AAEA,mBAAemB,oBAAf,GAAsC;AACpCL,MAAAA,QAAQ,CAACpC,UAAU,CAAC,IAAD,CAAX,CAAR;AACAoC,MAAAA,QAAQ,CAACrC,uBAAuB,CAAC,KAAD,CAAxB,CAAR;;AACA,UAAI;AAAA;;AACF,cAAM2C,aAAa,GAAG,MAAMtC,gBAAgB,CAC1CuB,WAD0C,aAC1CA,WAD0C,gDAC1CA,WAAW,CAAEgB,UAD6B,0DAC1C,sBAAyBC,WADiB,CAA5C;AAIAhB,QAAAA,cAAc,CAAC,EAAE,GAAGD,WAAL;AAAkBe,UAAAA;AAAlB,SAAD,CAAd;AAEAN,QAAAA,QAAQ,CACNnC,kBAAkB,CAAC,EACjB,GAAGkC,UADc;AAEjBU,UAAAA,QAAQ,EAAEV,UAAF,aAAEA,UAAF,+CAAEA,UAAU,CAAEU,QAAd,yDAAE,qBAAsBC,GAAtB,CAA2BC,CAAD,IAAO;AACzC,mBAAOA,CAAC,CAACC,EAAF,MAASrB,WAAT,aAASA,WAAT,uBAASA,WAAW,CAAEqB,EAAtB,IACH,EACE,GAAGrB,WADL;AAEEe,cAAAA,aAFF;AAGEJ,cAAAA,WAAW,EAAE,EAHf;AAIED,cAAAA,cAAc,EAAE;AAJlB,aADG,GAOHU,CAPJ;AAQD,WATS;AAFO,SAAD,CADZ,CAAR;AAgBAX,QAAAA,QAAQ,CAACpC,UAAU,CAAC,KAAD,CAAX,CAAR;AACD,OAxBD,CAwBE,OAAO+C,CAAP,EAAU;AACVE,QAAAA,OAAO,CAACC,GAAR,CAAYH,CAAZ;AACD;AACF;;AACDlB,IAAAA,eAAe,IAAIY,oBAAoB,EAAvC;AACD,GAnCQ,EAmCN,CAACZ,eAAD,CAnCM,CAAT;AAqCAhC,EAAAA,SAAS,CAAC,MAAM;AAAA;;AACduC,IAAAA,QAAQ,CACNnC,kBAAkB,CAAC,EACjB,GAAGkC,UADc;AAEjBU,MAAAA,QAAQ,EAAEV,UAAF,aAAEA,UAAF,gDAAEA,UAAU,CAAEU,QAAd,0DAAE,sBAAsBC,GAAtB,CAA2BC,CAAD,IAAO;AACzC,eAAOA,CAAC,CAACC,EAAF,MAASrB,WAAT,aAASA,WAAT,uBAASA,WAAW,CAAEqB,EAAtB,IAA2B,EAAE,GAAGrB;AAAL,SAA3B,GAAgDoB,CAAvD;AACD,OAFS;AAFO,KAAD,CADZ,CAAR;AAQD,GATQ,EASN,CACDlC,GAAG,CAACc,WAAD,EAAc,iBAAd,CAAH,IAAuCA,WAAW,CAACwB,eADlD,EAEDtC,GAAG,CAACc,WAAD,EAAc,aAAd,CAAH,IAAmCA,WAAW,CAACW,WAAZ,CAAwBc,MAF1D,EAGDvC,GAAG,CAACc,WAAD,EAAc,kBAAd,CAHF,CATM,CAAT;AAeA,sBACE,oBAAC,eAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE,oBAAC,KAAD;AACE,IAAA,KAAK,EAAE;AACL0B,MAAAA,MAAM,EAAE,QADH;AAELC,MAAAA,OAAO,EAAE;AAFJ,KADT;AAKE,IAAA,SAAS,EAAE,CALb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAOE;AACE,IAAA,KAAK,EAAE;AACLC,MAAAA,OAAO,EAAE,MADJ;AAELC,MAAAA,cAAc,EAAE,eAFX;AAGLC,MAAAA,UAAU,EAAE;AAHP,KADT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAOE,oBAAC,WAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE,oBAAC,UAAD;AAAY,IAAA,OAAO,EAAC,cAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aADF,eAGE,oBAAC,MAAD;AACE,IAAA,IAAI,EAAC,YADP;AAEE,IAAA,QAAQ,EAAElC,QAFZ;AAGE,IAAA,OAAO,EAAEC,OAHX;AAIE,IAAA,KAAK,EAAE,CAAAG,WAAW,SAAX,IAAAA,WAAW,WAAX,sCAAAA,WAAW,CAAEgB,UAAb,kFAAyBe,KAAzB,KAAkC,EAJ3C;AAKE,IAAA,WAAW,EAAE,MAAM;AAAA;;AACjB,0BACE;AACE,QAAA,KAAK,EAAE;AACLC,UAAAA,QAAQ,EAAE,OADL;AAELC,UAAAA,QAAQ,EAAE,QAFL;AAGLC,UAAAA,YAAY,EAAE;AAHT,SADT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAOGlC,WAPH,aAOGA,WAPH,iDAOGA,WAAW,CAAEgB,UAPhB,2DAOG,uBAAyBe,KAP5B,CADF;AAWD,KAjBH;AAkBE,IAAA,KAAK,EAAE;AACLI,MAAAA,QAAQ,EAAE;AADL,KAlBT;AAqBE,IAAA,QAAQ,EAAGf,CAAD,IAAO;AACfnB,MAAAA,cAAc,CAAC,EACb,GAAGD,WADU;AAEbgB,QAAAA,UAAU,EAAEI,CAAC,CAACgB,MAAF,CAASC,KAFR;AAGb1B,QAAAA,WAAW,EAAE;AAHA,OAAD,CAAd;AAMAZ,MAAAA,gBAAgB,CAAC,IAAD,CAAhB;AACAI,MAAAA,kBAAkB,CAACiB,CAAC,CAACgB,MAAF,CAASC,KAAT,CAAepB,WAAhB,CAAlB;AACD,KA9BH;AA+BE,IAAA,QAAQ,MA/BV;AAgCE,IAAA,UAAU,EAAE;AACVI,MAAAA,EAAE,EAAE;AADM,KAhCd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAoCG,CAACzC,OAAO,CAACe,OAAD,aAACA,OAAD,uBAACA,OAAO,CAAE2C,YAAV,CAAR,KACC3C,OADD,aACCA,OADD,uBACCA,OAAO,CAAE2C,YAAT,CAAsBC,KAAtB,CAA4BpB,GAA5B,CAAiCqB,CAAD,IAAO;AACrC,wBACE,oBAAC,QAAD;AAAU,MAAA,GAAG,EAAEA,CAAC,CAACvB,WAAjB;AAA8B,MAAA,KAAK,EAAEuB,CAArC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACGA,CAAC,CAACT,KADL,CADF;AAKD,GAND,CADD,CApCH,CAHF,CAPF,EAwDG7C,GAAG,CAACc,WAAD,EAAc,YAAd,CAAH,iBACC;AACE,IAAA,KAAK,EAAE;AACL4B,MAAAA,OAAO,EAAE,MADJ;AAELE,MAAAA,UAAU,EAAE;AAFP,KADT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAME,oBAAC,MAAD;AAAQ,IAAA,OAAO,EAAE,MAAMzB,cAAc,CAAC,IAAD,CAArC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,wBAEInB,GAAG,CAACc,WAAD,EAAc,eAAd,CAAH,8BACAA,WAAW,CAACe,aADZ,oFACA,sBAA2BwB,KAD3B,2DACA,uBAAkC3B,MAAlC,CAA0C4B,CAAD,IAAOA,CAAC,CAACC,MAAlD,EACGhB,MAFH,CAAD,IAGC,CALJ,MANF,eAeE,oBAAC,UAAD;AACE,IAAA,QAAQ,EACNvC,GAAG,CAACc,WAAD,EAAc,aAAd,CAAH,IACAd,GAAG,CAACc,WAAD,EAAc,aAAd,CAAH,CAAgCyB,MADhC,IAEA,CAAC3B,aAJL;AAME,IAAA,OAAO,EAAE,MAAM;AACbG,MAAAA,cAAc,CAAC,EACb,GAAGD,WADU;AAEbwB,QAAAA,eAAe,EAAE,IAAIkB,IAAJ,GAAWC,OAAX,EAFJ;AAGbhC,QAAAA,WAAW,EAAEzB,GAAG,CAACc,WAAD,EAAc,aAAd,CAAH,GACT,CACE,IAAGA,WAAH,aAAGA,WAAH,uBAAGA,WAAW,CAAEW,WAAhB,CADF,EAEE;AAAEiC,UAAAA,QAAQ,EAAE,IAAIF,IAAJ,GAAWC,OAAX;AAAZ,SAFF,CADS,GAKT,CAAC;AAAEC,UAAAA,QAAQ,EAAE,IAAIF,IAAJ,GAAWC,OAAX;AAAZ,SAAD;AARS,OAAD,CAAd;AAUA5C,MAAAA,gBAAgB,CAAC,KAAD,CAAhB;AACD,KAlBH;AAmBE,IAAA,KAAK,EAAC,SAnBR;AAoBE,IAAA,SAAS,EAAC,MApBZ;AAqBE,IAAA,KAAK,EAAE;AACL2B,MAAAA,MAAM,EAAE;AADH,KArBT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAyBE,oBAAC,OAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAzBF,CAfF,EA0CG,CAAAlB,UAAU,SAAV,IAAAA,UAAU,WAAV,qCAAAA,UAAU,CAAEU,QAAZ,gFAAsBO,MAAtB,IAA+B,CAA/B,iBACC,oBAAC,UAAD;AACE,IAAA,OAAO,EAAE,MAAM;AACbhB,MAAAA,QAAQ,CACNnC,kBAAkB,CAAC,EACjB,GAAGkC,UADc;AAEjBU,QAAAA,QAAQ,EAAEV,UAAF,aAAEA,UAAF,uBAAEA,UAAU,CAAEU,QAAZ,CAAqBN,MAArB,CACPQ,CAAD,IAAO,CAAAA,CAAC,SAAD,IAAAA,CAAC,WAAD,YAAAA,CAAC,CAAEC,EAAH,OAAU1B,OAAV,aAAUA,OAAV,uBAAUA,OAAO,CAAE0B,EAAnB,CADC;AAFO,OAAD,CADZ,CAAR;AAQAtB,MAAAA,gBAAgB,CAAC,IAAD,CAAhB;AACD,KAXH;AAYE,IAAA,SAAS,EAAC,MAZZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAcE,oBAAC,UAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAdF,CA3CJ,CAzDJ,CAPF,EAgIGb,GAAG,CAACc,WAAD,EAAc,gBAAd,CAAH,IACD,CAAAA,WAAW,SAAX,IAAAA,WAAW,WAAX,YAAAA,WAAW,CAAEU,cAAb,IAA8B,CAD7B,gBAEC;AAAK,IAAA,KAAK,EAAE;AAAEgB,MAAAA,MAAM,EAAE;AAAV,KAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE,oBAAC,MAAD;AACE,IAAA,OAAO,EAAC,WADV;AAEE,IAAA,IAAI,EAAC,OAFP;AAGE,IAAA,KAAK,EAAC,SAHR;AAIE,IAAA,KAAK,EAAE;AAAEA,MAAAA,MAAM,EAAE;AAAV,KAJT;AAKE,IAAA,OAAO,EAAE,MAAM;AAAA;;AACbhB,MAAAA,cAAc,CAACe,MAAf,IACExB,cAAc,CAAC,EACb,GAAGD,WADU;AAEbU,QAAAA,cAAc,EAAE,CAFH;AAGbC,QAAAA,WAAW,EAAE,CACX,IAAGX,WAAH,aAAGA,WAAH,iDAAGA,WAAW,CAAEW,WAAhB,2DAAG,uBAA0BC,MAA1B,CAAkCC,CAAD,IAAO,CAACA,CAAC,CAACgC,OAA3C,CAAH,CADW,EAEX;AACED,UAAAA,QAAQ,EAAE,IAAIF,IAAJ,GAAWC,OAAX,EADZ;AAEEJ,UAAAA,KAAK,EAAE,CAAC,GAAG7B,cAAJ,CAFT;AAGEoC,UAAAA,WAAW,EAAE;AAHf,SAFW;AAHA,OAAD,CADhB;AAaA/C,MAAAA,gBAAgB,CAAC,IAAD,CAAhB;AACD,KApBH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UADF,eA0BE,oBAAC,MAAD;AACE,IAAA,OAAO,EAAC,WADV;AAEE,IAAA,IAAI,EAAC,OAFP;AAGE,IAAA,KAAK,EAAC,SAHR;AAIE,IAAA,OAAO,EAAE,MAAM;AAAA;;AACbW,MAAAA,cAAc,CAACe,MAAf,IACExB,cAAc,CAAC,EACb,GAAGD,WADU;AAEbU,QAAAA,cAAc,EAAE,CAFH;AAGbC,QAAAA,WAAW,EAAE,CACX,IAAGX,WAAH,aAAGA,WAAH,iDAAGA,WAAW,CAAEW,WAAhB,2DAAG,uBAA0BC,MAA1B,CAAkCC,CAAD,IAAO,CAACA,CAAC,CAACgC,OAA3C,CAAH,CADW,EAEX;AACED,UAAAA,QAAQ,EAAE,IAAIF,IAAJ,GAAWC,OAAX,EADZ;AAEEJ,UAAAA,KAAK,EAAE,CAAC,GAAG7B,cAAJ,CAFT;AAGEoC,UAAAA,WAAW,EAAE;AAHf,SAFW;AAHA,OAAD,CADhB;AAaA/C,MAAAA,gBAAgB,CAAC,IAAD,CAAhB;AACD,KAnBH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WA1BF,CAFD,GAoDG,IApLN,eAsLE;AACE,IAAA,KAAK,EAAE;AACL6B,MAAAA,OAAO,EAAE,MADJ;AAELmB,MAAAA,aAAa,EAAE;AAFV,KADT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAMG7D,GAAG,CAACc,WAAD,EAAc,aAAd,CAAH,IACDd,GAAG,CAACc,WAAD,EAAc,aAAd,CAAH,CAAgCyB,MAD/B,GAEGzB,WAFH,aAEGA,WAFH,uBAEGA,WAAW,CAAEW,WAAb,CAAyBQ,GAAzB,CAA8BN,CAAD,IAAO;AAClC,wBACE,oBAAC,mBAAD;AACE,MAAA,WAAW,EAAEb,WADf;AAEE,MAAA,cAAc,EAAEC,cAFlB;AAGE,MAAA,aAAa,EAAEH,aAHjB;AAIE,MAAA,gBAAgB,EAAEC,gBAJpB;AAKE,MAAA,QAAQ,EAAEH,QALZ;AAME,MAAA,OAAO,EAAEC,OANX;AAOE,MAAA,GAAG,EAAEX,GAAG,CAAC2B,CAAD,EAAI,UAAJ,CAPV;AAQE,MAAA,UAAU,EAAEA,CARd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF;AAYD,GAbD,CAFH,GAgBG,IAtBN,CAtLF,CADF,EAiNGT,WAAW,iBACV,oBAAC,kBAAD;AACE,IAAA,WAAW,EAAEJ,WADf;AAEE,IAAA,cAAc,EAAEC,cAFlB;AAGE,IAAA,cAAc,EAAEI,cAHlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAlNJ,CADF;AA2ND,CAlSD;;AAoSAX,WAAW,CAACsD,YAAZ,GAA2B,EAA3B;AAEA,eAAetD,WAAf","sourcesContent":["import React, { useEffect, useState } from \"react\";\n\nimport {\n  savedNewDataSetSettings,\n  setLoading,\n  setNewDataSetState,\n} from \"../../../redux/actions/app_action\";\n\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { getDataSetFields } from \"../../../services/get-fields\";\n\nimport styled from \"styled-components\";\n\n// MATERIAL UI\n\nimport Paper from \"@material-ui/core/Paper\";\nimport isEmpty from \"lodash/isEmpty\";\nimport FormControl from \"@material-ui/core/FormControl\";\nimport InputLabel from \"@material-ui/core/InputLabel\";\nimport Select from \"@material-ui/core/Select\";\nimport MenuItem from \"@material-ui/core/MenuItem\";\nimport Button from \"@material-ui/core/Button\";\nimport get from \"lodash/get\";\nimport IconButton from \"@material-ui/core/IconButton\";\nimport AddIcon from \"@material-ui/icons/Add\";\nimport DeleteIcon from \"@material-ui/icons/Delete\";\n\nimport FilterForNewDataSet from \"./views/FilterForNewDataSet\";\nimport ModalDataSetFields from \"../modals/ModalDataSetFields\";\n\nconst DataSetListComp = styled.div`\n  .parameter {\n    display: flex;\n    justify-content: space-between;\n    padding-left: 10px;\n    border: 1px solid grey;\n    border-radius: 5px;\n    align-items: center;\n    margin-bottom: 10px;\n\n    p {\n      margin: 0;\n    }\n  }\n`;\n\nconst NewEntities = ({\n  entitie,\n  register,\n  control,\n  isFullEntitie,\n  setIsFullEntitie,\n}) => {\n  const [entitiState, setEntitiState] = useState(entitie);\n  const [logicalTypeName, setLogicalTypeName] = useState(\"\");\n  const [isModalOpen, setIsMadalOpen] = useState(false);\n\n  const state = useSelector((state) => state.app);\n  const { newDataSet } = state;\n  const dispatch = useDispatch();\n\n  const checkedFilters =\n    get(entitiState, \"filtersList\") &&\n    entitiState?.filtersList?.filter((f) => get(f, \"checked\"));\n\n  useEffect(() => {\n    setEntitiState({ ...entitie });\n\n    async function getDataSetFieldsList() {\n      dispatch(setLoading(true));\n      dispatch(savedNewDataSetSettings(false));\n      try {\n        const dataSetFields = await getDataSetFields(\n          entitiState?.selectType?.logicalName\n        );\n\n        setEntitiState({ ...entitiState, dataSetFields });\n\n        dispatch(\n          setNewDataSetState({\n            ...newDataSet,\n            entities: newDataSet?.entities?.map((e) => {\n              return e.id === entitiState?.id\n                ? {\n                    ...entitiState,\n                    dataSetFields,\n                    filtersList: [],\n                    checkedFilters: 0,\n                  }\n                : e;\n            }),\n          })\n        );\n\n        dispatch(setLoading(false));\n      } catch (e) {\n        console.log(e);\n      }\n    }\n    logicalTypeName && getDataSetFieldsList();\n  }, [logicalTypeName]);\n\n  useEffect(() => {\n    dispatch(\n      setNewDataSetState({\n        ...newDataSet,\n        entities: newDataSet?.entities?.map((e) => {\n          return e.id === entitiState?.id ? { ...entitiState } : e;\n        }),\n      })\n    );\n  }, [\n    get(entitiState, \"filterChangedId\") && entitiState.filterChangedId,\n    get(entitiState, \"filtersList\") && entitiState.filtersList.length,\n    get(entitiState, \"dataSetFields.id\"),\n  ]);\n\n  return (\n    <DataSetListComp>\n      <Paper\n        style={{\n          margin: \"20px 0\",\n          padding: \"15px\",\n        }}\n        elevation={3}\n      >\n        <div\n          style={{\n            display: \"flex\",\n            justifyContent: \"space-between\",\n            alignItems: \"flex-end\",\n          }}\n        >\n          <FormControl>\n            <InputLabel htmlFor=\"select-label\">Type*</InputLabel>\n\n            <Select\n              name=\"selectType\"\n              inputRef={register}\n              control={control}\n              value={entitiState?.selectType?.label || \"\"}\n              renderValue={() => {\n                return (\n                  <div\n                    style={{\n                      maxWidth: \"100px\",\n                      overflow: \"hidden\",\n                      textOverflow: \"ellipsis\",\n                    }}\n                  >\n                    {entitiState?.selectType?.label}\n                  </div>\n                );\n              }}\n              style={{\n                minWidth: \"100px\",\n              }}\n              onChange={(e) => {\n                setEntitiState({\n                  ...entitiState,\n                  selectType: e.target.value,\n                  filtersList: [],\n                });\n\n                setIsFullEntitie(true);\n                setLogicalTypeName(e.target.value.logicalName);\n              }}\n              required\n              inputProps={{\n                id: \"select-label\",\n              }}\n            >\n              {!isEmpty(entitie?.dataSetTypes) &&\n                entitie?.dataSetTypes.items.map((i) => {\n                  return (\n                    <MenuItem key={i.logicalName} value={i}>\n                      {i.label}\n                    </MenuItem>\n                  );\n                })}\n            </Select>\n          </FormControl>\n          {get(entitiState, \"selectType\") && (\n            <div\n              style={{\n                display: \"flex\",\n                alignItems: \"center\",\n              }}\n            >\n              <Button onClick={() => setIsMadalOpen(true)}>\n                Choose fields (\n                {(get(entitiState, \"dataSetFields\") &&\n                  entitiState.dataSetFields?.items?.filter((i) => i.chosen)\n                    .length) ||\n                  0}\n                )\n              </Button>\n\n              <IconButton\n                disabled={\n                  get(entitiState, \"filtersList\") &&\n                  get(entitiState, \"filtersList\").length &&\n                  !isFullEntitie\n                }\n                onClick={() => {\n                  setEntitiState({\n                    ...entitiState,\n                    filterChangedId: new Date().getTime(),\n                    filtersList: get(entitiState, \"filtersList\")\n                      ? [\n                          ...entitiState?.filtersList,\n                          { filterId: new Date().getTime() },\n                        ]\n                      : [{ filterId: new Date().getTime() }],\n                  });\n                  setIsFullEntitie(false);\n                }}\n                color=\"primary\"\n                component=\"span\"\n                style={{\n                  margin: \"0 0 0 20px\",\n                }}\n              >\n                <AddIcon />\n              </IconButton>\n              {newDataSet?.entities?.length > 1 && (\n                <IconButton\n                  onClick={() => {\n                    dispatch(\n                      setNewDataSetState({\n                        ...newDataSet,\n                        entities: newDataSet?.entities.filter(\n                          (e) => e?.id !== entitie?.id\n                        ),\n                      })\n                    );\n                    setIsFullEntitie(true);\n                  }}\n                  component=\"span\"\n                >\n                  <DeleteIcon />\n                </IconButton>\n              )}\n            </div>\n          )}\n        </div>\n\n        {get(entitiState, \"checkedFilters\") &&\n        entitiState?.checkedFilters > 1 ? (\n          <div style={{ margin: \"15px 0 5px 0\" }}>\n            <Button\n              variant=\"contained\"\n              size=\"small\"\n              color=\"primary\"\n              style={{ margin: \"0 10px 0 0\" }}\n              onClick={() => {\n                checkedFilters.length &&\n                  setEntitiState({\n                    ...entitiState,\n                    checkedFilters: 0,\n                    filtersList: [\n                      ...entitiState?.filtersList?.filter((f) => !f.checked),\n                      {\n                        filterId: new Date().getTime(),\n                        items: [...checkedFilters],\n                        logicalType: \"or\",\n                      },\n                    ],\n                  });\n                setIsFullEntitie(true);\n              }}\n            >\n              Or\n            </Button>\n\n            <Button\n              variant=\"contained\"\n              size=\"small\"\n              color=\"primary\"\n              onClick={() => {\n                checkedFilters.length &&\n                  setEntitiState({\n                    ...entitiState,\n                    checkedFilters: 0,\n                    filtersList: [\n                      ...entitiState?.filtersList?.filter((f) => !f.checked),\n                      {\n                        filterId: new Date().getTime(),\n                        items: [...checkedFilters],\n                        logicalType: \"and\",\n                      },\n                    ],\n                  });\n                setIsFullEntitie(true);\n              }}\n            >\n              And\n            </Button>\n          </div>\n        ) : null}\n\n        <div\n          style={{\n            display: \"flex\",\n            flexDirection: \"column\",\n          }}\n        >\n          {get(entitiState, \"filtersList\") &&\n          get(entitiState, \"filtersList\").length\n            ? entitiState?.filtersList.map((f) => {\n                return (\n                  <FilterForNewDataSet\n                    entitiState={entitiState}\n                    setEntitiState={setEntitiState}\n                    isFullEntitie={isFullEntitie}\n                    setIsFullEntitie={setIsFullEntitie}\n                    register={register}\n                    control={control}\n                    key={get(f, \"filterId\")}\n                    filterData={f}\n                  />\n                );\n              })\n            : null}\n        </div>\n      </Paper>\n\n      {isModalOpen && (\n        <ModalDataSetFields\n          entitiState={entitiState}\n          setEntitiState={setEntitiState}\n          setIsMadalOpen={setIsMadalOpen}\n        />\n      )}\n    </DataSetListComp>\n  );\n};\n\nNewEntities.defaultProps = {};\n\nexport default NewEntities;\n"]},"metadata":{},"sourceType":"module"}