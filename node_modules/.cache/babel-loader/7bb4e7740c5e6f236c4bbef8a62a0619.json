{"ast":null,"code":"var _jsxFileName = \"/Users/admin/UDS/addons-reportbuilder/src/components/Sidebar/SidebarData/views/DefineInputType.js\";\nimport React, { useEffect, useState } from \"react\";\nimport { findChangedFilter } from \"../halpers/findChangedFilter\"; // MATERIAL\n\nimport TextField from \"@material-ui/core/TextField\";\nimport InputLabel from \"@material-ui/core/InputLabel\";\nimport Select from \"@material-ui/core/Select\";\nimport MenuItem from \"@material-ui/core/MenuItem\";\nimport get from \"lodash/get\";\nexport const DefineInputType = ({\n  type,\n  filterState,\n  setFilterState,\n  register,\n  control\n}) => {\n  var _filterState$operator, _filterState$operator2;\n\n  switch (type) {\n    case \"number\":\n      return /*#__PURE__*/React.createElement(TextField, {\n        label: \"Number\",\n        type: \"number\",\n        disabled: !get(filterState, \"operatorsField\"),\n        style: {\n          width: \"100px\"\n        },\n        inputRef: register,\n        control: control,\n        value: get(filterState, \"operatorValue\"),\n        required: true,\n        onChange: e => {\n          setFilterState({ ...filterState,\n            operatorValue: e.target.value >= 0 ? e.target.value : 0\n          });\n        },\n        InputLabelProps: {\n          shrink: true\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 24,\n          columnNumber: 9\n        }\n      });\n\n    default:\n      return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(InputLabel, {\n        htmlFor: \"select-filter-value\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 50,\n          columnNumber: 11\n        }\n      }, \"Value*\"), /*#__PURE__*/React.createElement(Select, {\n        inputRef: register,\n        control: control,\n        disabled: !get(filterState, \"operatorsField\"),\n        value: get(filterState, \"operatorValue\"),\n        style: {\n          width: \"100px\"\n        },\n        required: true,\n        onChange: e => {\n          setFilterState({ ...filterState,\n            operatorValue: e.target.value\n          });\n        },\n        inputProps: {\n          id: \"select-filter-value\"\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 51,\n          columnNumber: 11\n        }\n      }, get(filterState, \"operatorsField.valueField.options\") ? filterState === null || filterState === void 0 ? void 0 : (_filterState$operator = filterState.operatorsField) === null || _filterState$operator === void 0 ? void 0 : (_filterState$operator2 = _filterState$operator.valueField) === null || _filterState$operator2 === void 0 ? void 0 : _filterState$operator2.options.map(({\n        value,\n        label\n      }) => {\n        return /*#__PURE__*/React.createElement(MenuItem, {\n          key: value,\n          value: value,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 74,\n            columnNumber: 21\n          }\n        }, label);\n      }) : /*#__PURE__*/React.createElement(MenuItem, {\n        value: null,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 81,\n          columnNumber: 15\n        }\n      }, \"Empty\")));\n  }\n};\nexport const DefineInputTypeForCombinedFilter = ({\n  type,\n  filterState,\n  setFilterState,\n  setEntitiState,\n  entitiState,\n  filterData,\n  filterId,\n  register,\n  control\n}) => {\n  var _filterState$operator3, _filterState$operator4;\n\n  switch (type) {\n    case \"number\":\n      return /*#__PURE__*/React.createElement(TextField, {\n        label: \"Number\",\n        type: \"number\",\n        disabled: !get(filterState, \"operatorsField\"),\n        style: {\n          width: \"100px\"\n        },\n        inputRef: register,\n        control: control,\n        value: get(filterState, \"operatorValue\"),\n        required: true,\n        onChange: e => {\n          setFilterState({ ...filterState,\n            operatorValue: e.target.value >= 0 ? e.target.value : 0\n          });\n          setEntitiState({ ...entitiState,\n            filterChangedId: new Date().getTime(),\n            filtersList: entitiState === null || entitiState === void 0 ? void 0 : entitiState.filtersList.map(f => {\n              var _f$items;\n\n              return f.filterId === filterData.filterId ? { ...f,\n                items: f === null || f === void 0 ? void 0 : (_f$items = f.items) === null || _f$items === void 0 ? void 0 : _f$items.map(i => {\n                  return i.filterId === filterId ? { ...i,\n                    operatorValue: e.target.value\n                  } : i;\n                })\n              } : findChangedFilter(f, filterData.filterId, filterId, {\n                operatorValue: e.target.value\n              });\n            })\n          });\n        },\n        InputLabelProps: {\n          shrink: true\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 103,\n          columnNumber: 9\n        }\n      });\n\n    default:\n      return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(InputLabel, {\n        htmlFor: \"select-filter-value\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 151,\n          columnNumber: 11\n        }\n      }, \"Value*\"), /*#__PURE__*/React.createElement(Select, {\n        inputRef: register,\n        control: control,\n        disabled: !get(filterState, \"operatorsField\"),\n        value: get(filterState, \"operatorValue\"),\n        renderValue: () => {\n          return /*#__PURE__*/React.createElement(\"div\", {\n            style: {\n              maxWidth: \"80px\",\n              overflow: \"hidden\",\n              textOverflow: \"ellipsis\"\n            },\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 159,\n              columnNumber: 17\n            }\n          }, get(filterState, \"operatorValue\"));\n        },\n        style: {\n          width: \"100px\"\n        },\n        required: true,\n        onChange: e => {\n          setFilterState({ ...filterState,\n            operatorValue: e.target.value\n          });\n          setEntitiState({ ...entitiState,\n            filterChangedId: new Date().getTime(),\n            filtersList: entitiState === null || entitiState === void 0 ? void 0 : entitiState.filtersList.map(f => {\n              var _f$items2;\n\n              return f.filterId === filterData.filterId ? { ...f,\n                items: f === null || f === void 0 ? void 0 : (_f$items2 = f.items) === null || _f$items2 === void 0 ? void 0 : _f$items2.map(i => {\n                  return i.filterId === filterId ? { ...i,\n                    operatorValue: e.target.value\n                  } : i;\n                })\n              } : findChangedFilter(f, filterData.filterId, filterId, {\n                operatorValue: e.target.value\n              });\n            })\n          });\n        },\n        inputProps: {\n          id: \"select-filter-value\"\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 152,\n          columnNumber: 11\n        }\n      }, get(filterState, \"operatorsField.valueField.options\") ? filterState === null || filterState === void 0 ? void 0 : (_filterState$operator3 = filterState.operatorsField) === null || _filterState$operator3 === void 0 ? void 0 : (_filterState$operator4 = _filterState$operator3.valueField) === null || _filterState$operator4 === void 0 ? void 0 : _filterState$operator4.options.map(({\n        value,\n        label\n      }) => {\n        return /*#__PURE__*/React.createElement(MenuItem, {\n          key: value,\n          value: value,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 209,\n            columnNumber: 21\n          }\n        }, label);\n      }) : /*#__PURE__*/React.createElement(MenuItem, {\n        value: null,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 216,\n          columnNumber: 15\n        }\n      }, \"Empty\")));\n  }\n};","map":{"version":3,"sources":["/Users/admin/UDS/addons-reportbuilder/src/components/Sidebar/SidebarData/views/DefineInputType.js"],"names":["React","useEffect","useState","findChangedFilter","TextField","InputLabel","Select","MenuItem","get","DefineInputType","type","filterState","setFilterState","register","control","width","e","operatorValue","target","value","shrink","id","operatorsField","valueField","options","map","label","DefineInputTypeForCombinedFilter","setEntitiState","entitiState","filterData","filterId","filterChangedId","Date","getTime","filtersList","f","items","i","maxWidth","overflow","textOverflow"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from \"react\";\n\nimport { findChangedFilter } from \"../halpers/findChangedFilter\";\n\n// MATERIAL\n\nimport TextField from \"@material-ui/core/TextField\";\nimport InputLabel from \"@material-ui/core/InputLabel\";\nimport Select from \"@material-ui/core/Select\";\nimport MenuItem from \"@material-ui/core/MenuItem\";\n\nimport get from \"lodash/get\";\n\nexport const DefineInputType = ({\n  type,\n  filterState,\n  setFilterState,\n  register,\n  control,\n}) => {\n  switch (type) {\n    case \"number\":\n      return (\n        <TextField\n          label=\"Number\"\n          type=\"number\"\n          disabled={!get(filterState, \"operatorsField\")}\n          style={{\n            width: \"100px\",\n          }}\n          inputRef={register}\n          control={control}\n          value={get(filterState, \"operatorValue\")}\n          required\n          onChange={(e) => {\n            setFilterState({\n              ...filterState,\n              operatorValue: e.target.value >= 0 ? e.target.value : 0,\n            });\n          }}\n          InputLabelProps={{\n            shrink: true,\n          }}\n        />\n      );\n\n    default:\n      return (\n        <>\n          <InputLabel htmlFor=\"select-filter-value\">Value*</InputLabel>\n          <Select\n            inputRef={register}\n            control={control}\n            disabled={!get(filterState, \"operatorsField\")}\n            value={get(filterState, \"operatorValue\")}\n            style={{\n              width: \"100px\",\n            }}\n            required\n            onChange={(e) => {\n              setFilterState({\n                ...filterState,\n                operatorValue: e.target.value,\n              });\n            }}\n            inputProps={{\n              id: \"select-filter-value\",\n            }}\n          >\n            {get(filterState, \"operatorsField.valueField.options\") ? (\n              filterState?.operatorsField?.valueField?.options.map(\n                ({ value, label }) => {\n                  return (\n                    <MenuItem key={value} value={value}>\n                      {label}\n                    </MenuItem>\n                  );\n                }\n              )\n            ) : (\n              <MenuItem value={null}>Empty</MenuItem>\n            )}\n          </Select>\n        </>\n      );\n  }\n};\n\nexport const DefineInputTypeForCombinedFilter = ({\n  type,\n  filterState,\n  setFilterState,\n  setEntitiState,\n  entitiState,\n  filterData,\n  filterId,\n  register,\n  control,\n}) => {\n  switch (type) {\n    case \"number\":\n      return (\n        <TextField\n          label=\"Number\"\n          type=\"number\"\n          disabled={!get(filterState, \"operatorsField\")}\n          style={{\n            width: \"100px\",\n          }}\n          inputRef={register}\n          control={control}\n          value={get(filterState, \"operatorValue\")}\n          required\n          onChange={(e) => {\n            setFilterState({\n              ...filterState,\n              operatorValue: e.target.value >= 0 ? e.target.value : 0,\n            });\n\n            setEntitiState({\n              ...entitiState,\n              filterChangedId: new Date().getTime(),\n              filtersList: entitiState?.filtersList.map((f) => {\n                return f.filterId === filterData.filterId\n                  ? {\n                      ...f,\n                      items: f?.items?.map((i) => {\n                        return i.filterId === filterId\n                          ? {\n                              ...i,\n                              operatorValue: e.target.value,\n                            }\n                          : i;\n                      }),\n                    }\n                  : findChangedFilter(f, filterData.filterId, filterId, {\n                      operatorValue: e.target.value,\n                    });\n              }),\n            });\n          }}\n          InputLabelProps={{\n            shrink: true,\n          }}\n        />\n      );\n\n    default:\n      return (\n        <>\n          <InputLabel htmlFor=\"select-filter-value\">Value*</InputLabel>\n          <Select\n            inputRef={register}\n            control={control}\n            disabled={!get(filterState, \"operatorsField\")}\n            value={get(filterState, \"operatorValue\")}\n            renderValue={() => {\n              return (\n                <div\n                  style={{\n                    maxWidth: \"80px\",\n                    overflow: \"hidden\",\n                    textOverflow: \"ellipsis\",\n                  }}\n                >\n                  {get(filterState, \"operatorValue\")}\n                </div>\n              );\n            }}\n            style={{\n              width: \"100px\",\n            }}\n            required\n            onChange={(e) => {\n              setFilterState({\n                ...filterState,\n                operatorValue: e.target.value,\n              });\n              setEntitiState({\n                ...entitiState,\n                filterChangedId: new Date().getTime(),\n                filtersList: entitiState?.filtersList.map((f) => {\n                  return f.filterId === filterData.filterId\n                    ? {\n                        ...f,\n                        items: f?.items?.map((i) => {\n                          return i.filterId === filterId\n                            ? {\n                                ...i,\n                                operatorValue: e.target.value,\n                              }\n                            : i;\n                        }),\n                      }\n                    : findChangedFilter(f, filterData.filterId, filterId, {\n                        operatorValue: e.target.value,\n                      });\n                }),\n              });\n            }}\n            inputProps={{\n              id: \"select-filter-value\",\n            }}\n          >\n            {get(filterState, \"operatorsField.valueField.options\") ? (\n              filterState?.operatorsField?.valueField?.options.map(\n                ({ value, label }) => {\n                  return (\n                    <MenuItem key={value} value={value}>\n                      {label}\n                    </MenuItem>\n                  );\n                }\n              )\n            ) : (\n              <MenuItem value={null}>Empty</MenuItem>\n            )}\n          </Select>\n        </>\n      );\n  }\n};\n"]},"metadata":{},"sourceType":"module"}