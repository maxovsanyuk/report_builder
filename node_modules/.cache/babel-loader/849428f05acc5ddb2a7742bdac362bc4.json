{"ast":null,"code":"var _jsxFileName = \"/Users/admin/UDS/addons-reportbuilder/src/components/Sidebar/SidebarData/views/FilterComponent.js\";\nimport React, { useEffect, useState } from \"react\";\nimport { DefineInputType } from \"./DefineInputType\";\nimport { getFieldTypes } from \"../halpers/getFieldTypes\"; // MATERIAL UI\n\nimport Paper from \"@material-ui/core/Paper\";\nimport Checkbox from \"@material-ui/core/Checkbox\";\nimport FormControl from \"@material-ui/core/FormControl\";\nimport InputLabel from \"@material-ui/core/InputLabel\";\nimport Select from \"@material-ui/core/Select\";\nimport ListSubheader from \"@material-ui/core/ListSubheader\";\nimport MenuItem from \"@material-ui/core/MenuItem\";\nimport IconButton from \"@material-ui/core/IconButton\";\nimport DeleteIcon from \"@material-ui/icons/Delete\"; // LODASH\n\nimport get from \"lodash/get\";\nimport isEmpty from \"lodash/isEmpty\";\n\nconst FilterComponent = ({\n  filterState,\n  entitiState,\n  setFilterState,\n  setEntitiState,\n  isFullEntitie,\n  setIsFullEntitie,\n  register,\n  control\n}) => {\n  var _entitiState$filtersL, _currentFiltertstate$, _filterState$filterFi, _entitiState$dataSetF, _entitiState$dataSetF2, _currentFiltertstate$2, _filterState$operator, _filterState$operator3;\n\n  const [currentFiltertstate, setCurrentFiltertstate] = useState(filterState);\n  useEffect(() => {\n    currentFiltertstate && !(currentFiltertstate === null || currentFiltertstate === void 0 ? void 0 : currentFiltertstate.operatorValue) ? setIsFullEntitie(false) : setIsFullEntitie(true);\n  }, [currentFiltertstate && currentFiltertstate.operatorValue]);\n  return /*#__PURE__*/React.createElement(Paper, {\n    style: {\n      display: \"flex\",\n      justifyContent: \"space-between\",\n      margin: \"10px 0\",\n      padding: \"5px 10px 15px 10px\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 5\n    }\n  }, (entitiState === null || entitiState === void 0 ? void 0 : (_entitiState$filtersL = entitiState.filtersList) === null || _entitiState$filtersL === void 0 ? void 0 : _entitiState$filtersL.length) > 1 && /*#__PURE__*/React.createElement(Checkbox, {\n    checked: filterState.checked,\n    disabled: !isFullEntitie || !(filterState === null || filterState === void 0 ? void 0 : filterState.checked) && (entitiState === null || entitiState === void 0 ? void 0 : entitiState.checkedFilters) > 1,\n    color: \"primary\",\n    inputProps: {\n      \"aria-label\": \"secondary checkbox\"\n    },\n    onChange: e => {\n      setFilterState({ ...filterState,\n        checked: e.target.checked\n      });\n      setEntitiState({ ...entitiState,\n        checkedFilters: get(entitiState, \"checkedFilters\") || entitiState.checkedFilters === 0 ? e.target.checked ? (entitiState === null || entitiState === void 0 ? void 0 : entitiState.checkedFilters) + 1 : (entitiState === null || entitiState === void 0 ? void 0 : entitiState.checkedFilters) - 1 : 1\n      });\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(FormControl, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(InputLabel, {\n    htmlFor: \"select-filter-label\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 9\n    }\n  }, \"Filter fields*\"), /*#__PURE__*/React.createElement(Select, {\n    style: {\n      width: \"120px\"\n    },\n    value: (currentFiltertstate === null || currentFiltertstate === void 0 ? void 0 : (_currentFiltertstate$ = currentFiltertstate.filterFieldType) === null || _currentFiltertstate$ === void 0 ? void 0 : _currentFiltertstate$.label) || (filterState === null || filterState === void 0 ? void 0 : (_filterState$filterFi = filterState.filterFieldType) === null || _filterState$filterFi === void 0 ? void 0 : _filterState$filterFi.label),\n    renderValue: () => {\n      var _filterState$filterFi2;\n\n      return /*#__PURE__*/React.createElement(\"div\", {\n        style: {\n          maxWidth: \"100px\",\n          overflow: \"hidden\",\n          textOverflow: \"ellipsis\"\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 87,\n          columnNumber: 15\n        }\n      }, filterState === null || filterState === void 0 ? void 0 : (_filterState$filterFi2 = filterState.filterFieldType) === null || _filterState$filterFi2 === void 0 ? void 0 : _filterState$filterFi2.label);\n    },\n    required: true,\n    name: \"filterFieldType\",\n    inputRef: register,\n    control: control,\n    onChange: e => {\n      setFilterState({ ...filterState,\n        filterFieldType: e.target.value,\n        operatorsField: getFieldTypes(e.target.value.valueType)\n      });\n      setCurrentFiltertstate({ ...currentFiltertstate,\n        operatorValue: \"\",\n        filterFieldType: e.target.value,\n        operatorsField: getFieldTypes(get(e, \"target.value.valueType\"))\n      });\n    },\n    inputProps: {\n      id: \"select-filter-label\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(ListSubheader, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 120,\n      columnNumber: 11\n    }\n  }, \"Fields\"), !isEmpty(entitiState) && (entitiState === null || entitiState === void 0 ? void 0 : (_entitiState$dataSetF = entitiState.dataSetFields) === null || _entitiState$dataSetF === void 0 ? void 0 : _entitiState$dataSetF.items.filter(i => i.type === \"field\").map(f => {\n    return /*#__PURE__*/React.createElement(MenuItem, {\n      key: f.value,\n      value: f,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 126,\n        columnNumber: 19\n      }\n    }, f.label);\n  })), /*#__PURE__*/React.createElement(ListSubheader, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 132,\n      columnNumber: 11\n    }\n  }, \"Related\"), !isEmpty(entitiState) && (entitiState === null || entitiState === void 0 ? void 0 : (_entitiState$dataSetF2 = entitiState.dataSetFields) === null || _entitiState$dataSetF2 === void 0 ? void 0 : _entitiState$dataSetF2.items.filter(i => i.type === \"related\").map(f => {\n    return /*#__PURE__*/React.createElement(MenuItem, {\n      key: f.value,\n      value: f,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 138,\n        columnNumber: 19\n      }\n    }, f.label);\n  })))), /*#__PURE__*/React.createElement(FormControl, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 145,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(InputLabel, {\n    htmlFor: \"select-filter-operators\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 146,\n      columnNumber: 9\n    }\n  }, \"Operators*\"), /*#__PURE__*/React.createElement(Select, {\n    inputRef: register,\n    control: control,\n    style: {\n      width: \"100px\"\n    },\n    value: (currentFiltertstate === null || currentFiltertstate === void 0 ? void 0 : (_currentFiltertstate$2 = currentFiltertstate.operatorType) === null || _currentFiltertstate$2 === void 0 ? void 0 : _currentFiltertstate$2.label) || (filterState === null || filterState === void 0 ? void 0 : (_filterState$operator = filterState.operatorType) === null || _filterState$operator === void 0 ? void 0 : _filterState$operator.label),\n    renderValue: () => {\n      var _filterState$operator2;\n\n      return /*#__PURE__*/React.createElement(\"div\", {\n        style: {\n          maxWidth: \"100px\",\n          overflow: \"hidden\",\n          textOverflow: \"ellipsis\"\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 159,\n          columnNumber: 15\n        }\n      }, filterState === null || filterState === void 0 ? void 0 : (_filterState$operator2 = filterState.operatorType) === null || _filterState$operator2 === void 0 ? void 0 : _filterState$operator2.label);\n    },\n    required: true,\n    onChange: e => {\n      setFilterState({ ...filterState,\n        operatorType: e.target.value\n      });\n      setCurrentFiltertstate({ ...currentFiltertstate,\n        operatorType: e.target.value\n      });\n    },\n    inputProps: {\n      id: \"select-filter-operators\",\n      disabled: !get(filterState, \"operatorsField\")\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 147,\n      columnNumber: 9\n    }\n  }, get(filterState, \"operatorsField.operatorsField\") && (filterState === null || filterState === void 0 ? void 0 : filterState.operatorsField) ? filterState === null || filterState === void 0 ? void 0 : (_filterState$operator3 = filterState.operatorsField) === null || _filterState$operator3 === void 0 ? void 0 : _filterState$operator3.operatorsField.map(o => {\n    return /*#__PURE__*/React.createElement(MenuItem, {\n      key: o.value,\n      value: o,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 191,\n        columnNumber: 17\n      }\n    }, o.label);\n  }) : /*#__PURE__*/React.createElement(MenuItem, {\n    value: null,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 197,\n      columnNumber: 13\n    }\n  }, \"Empty\"))), /*#__PURE__*/React.createElement(FormControl, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 201,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(DefineInputType, {\n    type: get(filterState, \"operatorsField.type\"),\n    filterState: filterState,\n    setFilterState: setFilterState,\n    control: control,\n    register: register,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 202,\n      columnNumber: 9\n    }\n  })), /*#__PURE__*/React.createElement(IconButton, {\n    onClick: () => {\n      var _entitiState$filtersL2;\n\n      setEntitiState({ ...entitiState,\n        checkedFilters: get(filterState, \"checked\") && filterState.checked ? entitiState.checkedFilters - 1 : entitiState.checkedFilters,\n        filtersList: entitiState === null || entitiState === void 0 ? void 0 : (_entitiState$filtersL2 = entitiState.filtersList) === null || _entitiState$filtersL2 === void 0 ? void 0 : _entitiState$filtersL2.filter(f => (f === null || f === void 0 ? void 0 : f.filterId) !== (filterState === null || filterState === void 0 ? void 0 : filterState.filterId))\n      });\n      setIsFullEntitie(true);\n    },\n    component: \"span\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 210,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(DeleteIcon, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 226,\n      columnNumber: 9\n    }\n  })));\n};\n\nexport default FilterComponent;","map":{"version":3,"sources":["/Users/admin/UDS/addons-reportbuilder/src/components/Sidebar/SidebarData/views/FilterComponent.js"],"names":["React","useEffect","useState","DefineInputType","getFieldTypes","Paper","Checkbox","FormControl","InputLabel","Select","ListSubheader","MenuItem","IconButton","DeleteIcon","get","isEmpty","FilterComponent","filterState","entitiState","setFilterState","setEntitiState","isFullEntitie","setIsFullEntitie","register","control","currentFiltertstate","setCurrentFiltertstate","operatorValue","display","justifyContent","margin","padding","filtersList","length","checked","checkedFilters","e","target","width","filterFieldType","label","maxWidth","overflow","textOverflow","value","operatorsField","valueType","id","dataSetFields","items","filter","i","type","map","f","operatorType","disabled","o","filterId"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from \"react\";\n\nimport { DefineInputType } from \"./DefineInputType\";\nimport { getFieldTypes } from \"../halpers/getFieldTypes\";\n\n// MATERIAL UI\n\nimport Paper from \"@material-ui/core/Paper\";\nimport Checkbox from \"@material-ui/core/Checkbox\";\nimport FormControl from \"@material-ui/core/FormControl\";\nimport InputLabel from \"@material-ui/core/InputLabel\";\nimport Select from \"@material-ui/core/Select\";\nimport ListSubheader from \"@material-ui/core/ListSubheader\";\nimport MenuItem from \"@material-ui/core/MenuItem\";\nimport IconButton from \"@material-ui/core/IconButton\";\nimport DeleteIcon from \"@material-ui/icons/Delete\";\n\n// LODASH\n\nimport get from \"lodash/get\";\nimport isEmpty from \"lodash/isEmpty\";\n\nconst FilterComponent = ({\n  filterState,\n  entitiState,\n  setFilterState,\n  setEntitiState,\n  isFullEntitie,\n  setIsFullEntitie,\n  register,\n  control,\n}) => {\n  const [currentFiltertstate, setCurrentFiltertstate] = useState(filterState);\n\n  useEffect(() => {\n    currentFiltertstate && !currentFiltertstate?.operatorValue\n      ? setIsFullEntitie(false)\n      : setIsFullEntitie(true);\n  }, [currentFiltertstate && currentFiltertstate.operatorValue]);\n\n  return (\n    <Paper\n      style={{\n        display: \"flex\",\n        justifyContent: \"space-between\",\n        margin: \"10px 0\",\n        padding: \"5px 10px 15px 10px\",\n      }}\n    >\n      {entitiState?.filtersList?.length > 1 && (\n        <Checkbox\n          checked={filterState.checked}\n          disabled={\n            !isFullEntitie ||\n            (!filterState?.checked && entitiState?.checkedFilters > 1)\n          }\n          color=\"primary\"\n          inputProps={{ \"aria-label\": \"secondary checkbox\" }}\n          onChange={(e) => {\n            setFilterState({ ...filterState, checked: e.target.checked });\n            setEntitiState({\n              ...entitiState,\n\n              checkedFilters:\n                get(entitiState, \"checkedFilters\") ||\n                entitiState.checkedFilters === 0\n                  ? e.target.checked\n                    ? entitiState?.checkedFilters + 1\n                    : entitiState?.checkedFilters - 1\n                  : 1,\n            });\n          }}\n        />\n      )}\n      <FormControl>\n        <InputLabel htmlFor=\"select-filter-label\">Filter fields*</InputLabel>\n        <Select\n          style={{\n            width: \"120px\",\n          }}\n          value={\n            currentFiltertstate?.filterFieldType?.label ||\n            filterState?.filterFieldType?.label\n          }\n          renderValue={() => {\n            return (\n              <div\n                style={{\n                  maxWidth: \"100px\",\n                  overflow: \"hidden\",\n                  textOverflow: \"ellipsis\",\n                }}\n              >\n                {filterState?.filterFieldType?.label}\n              </div>\n            );\n          }}\n          required\n          name=\"filterFieldType\"\n          inputRef={register}\n          control={control}\n          onChange={(e) => {\n            setFilterState({\n              ...filterState,\n              filterFieldType: e.target.value,\n              operatorsField: getFieldTypes(e.target.value.valueType),\n            });\n\n            setCurrentFiltertstate({\n              ...currentFiltertstate,\n              operatorValue: \"\",\n              filterFieldType: e.target.value,\n              operatorsField: getFieldTypes(get(e, \"target.value.valueType\")),\n            });\n          }}\n          inputProps={{\n            id: \"select-filter-label\",\n          }}\n        >\n          <ListSubheader>Fields</ListSubheader>\n          {!isEmpty(entitiState) &&\n            entitiState?.dataSetFields?.items\n              .filter((i) => i.type === \"field\")\n              .map((f) => {\n                return (\n                  <MenuItem key={f.value} value={f}>\n                    {f.label}\n                  </MenuItem>\n                );\n              })}\n\n          <ListSubheader>Related</ListSubheader>\n          {!isEmpty(entitiState) &&\n            entitiState?.dataSetFields?.items\n              .filter((i) => i.type === \"related\")\n              .map((f) => {\n                return (\n                  <MenuItem key={f.value} value={f}>\n                    {f.label}\n                  </MenuItem>\n                );\n              })}\n        </Select>\n      </FormControl>\n      <FormControl>\n        <InputLabel htmlFor=\"select-filter-operators\">Operators*</InputLabel>\n        <Select\n          inputRef={register}\n          control={control}\n          style={{\n            width: \"100px\",\n          }}\n          value={\n            currentFiltertstate?.operatorType?.label ||\n            filterState?.operatorType?.label\n          }\n          renderValue={() => {\n            return (\n              <div\n                style={{\n                  maxWidth: \"100px\",\n                  overflow: \"hidden\",\n                  textOverflow: \"ellipsis\",\n                }}\n              >\n                {filterState?.operatorType?.label}\n              </div>\n            );\n          }}\n          required\n          onChange={(e) => {\n            setFilterState({\n              ...filterState,\n              operatorType: e.target.value,\n            });\n\n            setCurrentFiltertstate({\n              ...currentFiltertstate,\n              operatorType: e.target.value,\n            });\n          }}\n          inputProps={{\n            id: \"select-filter-operators\",\n            disabled: !get(filterState, \"operatorsField\"),\n          }}\n        >\n          {get(filterState, \"operatorsField.operatorsField\") &&\n          filterState?.operatorsField ? (\n            filterState?.operatorsField?.operatorsField.map((o) => {\n              return (\n                <MenuItem key={o.value} value={o}>\n                  {o.label}\n                </MenuItem>\n              );\n            })\n          ) : (\n            <MenuItem value={null}>Empty</MenuItem>\n          )}\n        </Select>\n      </FormControl>\n      <FormControl>\n        <DefineInputType\n          type={get(filterState, \"operatorsField.type\")}\n          filterState={filterState}\n          setFilterState={setFilterState}\n          control={control}\n          register={register}\n        />\n      </FormControl>\n      <IconButton\n        onClick={() => {\n          setEntitiState({\n            ...entitiState,\n            checkedFilters:\n              get(filterState, \"checked\") && filterState.checked\n                ? entitiState.checkedFilters - 1\n                : entitiState.checkedFilters,\n            filtersList: entitiState?.filtersList?.filter(\n              (f) => f?.filterId !== filterState?.filterId\n            ),\n          });\n          setIsFullEntitie(true);\n        }}\n        component=\"span\"\n      >\n        <DeleteIcon />\n      </IconButton>\n    </Paper>\n  );\n};\n\nexport default FilterComponent;\n"]},"metadata":{},"sourceType":"module"}