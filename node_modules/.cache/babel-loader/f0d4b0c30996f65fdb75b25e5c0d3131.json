{"ast":null,"code":"var _jsxFileName = \"/Users/admin/UDS/addons-reportbuilder/src/components/Sidebar/SidebarParameters/NewParameters.js\";\nimport React, { useEffect, useState } from \"react\";\nimport { useForm, ErrorMessage } from \"react-hook-form\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { savedNewParametersSetSettings, setNewParametersSetState, setReportParameters, showAlert } from \"../../../redux/actions/app_action\";\nimport styled from \"styled-components\";\nimport moment from \"moment\"; // LODASH\n\nimport isEmpty from \"lodash/isEmpty\";\nimport get from \"lodash/get\"; // material-ui\n\nimport TextField from \"@material-ui/core/TextField\";\nimport { KeyboardDateTimePicker } from \"@material-ui/pickers\";\nimport Button from \"@material-ui/core/Button\";\nimport InputLabel from \"@material-ui/core/InputLabel\";\nimport Select from \"@material-ui/core/Select\";\nimport MenuItem from \"@material-ui/core/MenuItem\";\nimport FormControl from \"@material-ui/core/FormControl\";\nimport Checkbox from \"@material-ui/core/Checkbox\";\nimport Dialog from \"@material-ui/core/Dialog\";\nimport DialogActions from \"@material-ui/core/DialogActions\";\nimport AppBar from \"@material-ui/core/AppBar\";\nimport Tab from \"@material-ui/core/Tab\";\nimport Paper from \"@material-ui/core/Paper\";\nimport TabContext from \"@material-ui/lab/TabContext\";\nimport TabList from \"@material-ui/lab/TabList\";\nimport TabPanel from \"@material-ui/lab/TabPanel\";\nimport DialogTitle from \"@material-ui/core/DialogTitle\";\nimport Radio from \"@material-ui/core/Radio\";\nimport IconButton from \"@material-ui/core/IconButton\";\nimport DeleteIcon from \"@material-ui/icons/Delete\";\nimport ParameterAssignValuesDialog from \"./views/ParameterAssignValuesDialog\";\nconst dateType = [{\n  value: \"string\",\n  label: \"String\"\n}, {\n  value: \"boolean\",\n  label: \"Boolean\"\n}, {\n  value: \"dateTime\",\n  label: \"DateTime\"\n}, {\n  value: \"integer\",\n  label: \"Integer\"\n}, {\n  value: \"float\",\n  label: \"Float\"\n}];\nconst NewParametersComp = styled.div`\n  width: calc(100% - 40px);\n  height: 100%;\n  position: absolute;\n  top: 0;\n  left: 0;\n  padding: 20px;\n  background: aliceblue;\n\n  .bts-box {\n    display: flex;\n    justify-content: flex-end;\n    position: absolute;\n    bottom: 100px;\n    right: 20px;\n\n    .save-btn,\n    .close-btn {\n      padding: 10px 25px;\n      border: 1px solid #ccc;\n      border-radius: 4px;\n      box-shadow: 0 3px 3px -2px rgba(0, 0, 0, 0.2),\n        0px 3px 4px 0px rgba(0, 0, 0, 0.14), 0px 1px 8px 0px rgba(0, 0, 0, 0.12);\n      margin: 0 0 0 15px;\n      transition: 0.3s;\n      &:hover {\n        cursor: pointer;\n        background: #ccc;\n        transition: 0.3s;\n      }\n      &:focus {\n        outline: none;\n        background: #ccc;\n      }\n    }\n  }\n\n  .assign-values {\n    margin: 20px 0;\n    text-decoration: underline;\n    font-size: 14px;\n    color: dodgerblue;\n    &:hover {\n      cursor: pointer;\n    }\n  }\n`;\n\nconst NewParameters = ({\n  minNameLength,\n  maxNameLength,\n  editedParametersSet,\n  isHiddenControlBtn,\n  setEditParametersSetId\n}) => {\n  var _errors$parametersSet, _errors$parametersSet2, _errors$parametersPro, _errors$parametersPro2;\n\n  const [isOpen, setIsOpen] = useState(false);\n  const [isOpenDialog, setIsOpenDialog] = useState(false);\n  const [parametersState, setParametersState] = useState({ ...editedParametersSet\n  });\n  const [isHiddenEditControlBtn, setHiddenEditControlBtn] = useState(isHiddenControlBtn);\n  const state = useSelector(state => state.app);\n  const {\n    newParametersSet,\n    parameters,\n    isShownAlert,\n    isSavedNewParametersData\n  } = state;\n  const dispatch = useDispatch();\n  const {\n    handleSubmit,\n    register,\n    errors,\n    watch,\n    control,\n    onSubmit\n  } = useForm();\n  let parametersSetName = watch(\"parametersSetName\");\n  let parametersPromptName = watch(\"parametersPromptName\"); // EDIT DATASET\n\n  useEffect(() => {\n    editedParametersSet && dispatch(setNewParametersSetState(editedParametersSet));\n  }, [editedParametersSet, get(editedParametersSet, \"entities\") && editedParametersSet.entities.length]); // LOADING DATASETS OPT\n\n  useEffect(() => {\n    isOpen && dispatch(setNewParametersSetState({ ...newParametersSet,\n      id: new Date().getTime()\n    }));\n  }, [isOpen]);\n\n  if (!isOpen && isSavedNewParametersData && !isHiddenEditControlBtn) {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      style: {\n        position: \"absolute\",\n        left: \"50%\",\n        transform: \"translateX(-50%)\",\n        bottom: \"60px\"\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 176,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(Button, {\n      onClick: () => {\n        setIsOpen(true);\n        dispatch(setNewParametersSetState({\n          id: new Date().getTime()\n        }));\n      },\n      variant: \"contained\",\n      color: \"primary\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 184,\n        columnNumber: 9\n      }\n    }, \"New parameters\"));\n  }\n\n  return /*#__PURE__*/React.createElement(NewParametersComp, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 203,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"form\", {\n    onSubmit: handleSubmit(onSubmit),\n    style: {\n      display: \"flex\",\n      flexDirection: \"column\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 204,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(TextField, {\n    error: (errors === null || errors === void 0 ? void 0 : (_errors$parametersSet = errors.parametersSetName) === null || _errors$parametersSet === void 0 ? void 0 : _errors$parametersSet.type) || (errors === null || errors === void 0 ? void 0 : (_errors$parametersSet2 = errors.parametersSetName) === null || _errors$parametersSet2 === void 0 ? void 0 : _errors$parametersSet2.message) || (errors === null || errors === void 0 ? void 0 : errors.parametersSetName),\n    register: register,\n    required: true,\n    style: {\n      width: \"100%\",\n      margin: \"0 0 15px 0\"\n    },\n    onChange: e => {\n      dispatch(setNewParametersSetState({ ...newParametersSet,\n        parametersSetName: e.target.value\n      }));\n      dispatch(savedNewParametersSetSettings(false));\n    },\n    label: \"Name\",\n    name: \"parametersSetName\",\n    value: parametersSetName || get(editedParametersSet, \"parametersSetName\"),\n    inputRef: register({\n      validate: value => {\n        return isEmpty(parameters.filter(d => {\n          if (d.parametersSetName === get(editedParametersSet, \"parametersSetName\")) {\n            return false;\n          }\n\n          return d.parametersSetName === value;\n        }));\n      },\n      maxLength: {\n        value: maxNameLength,\n        message: \"Max 20 letters\"\n      },\n      minLength: {\n        value: minNameLength,\n        message: \"Min 4 letters\"\n      }\n    }),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 208,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(\"div\", {\n    style: {\n      margin: \"0 0 10px 0\",\n      fontSize: \"12px\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 260,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(ErrorMessage, {\n    errors: errors,\n    name: \"parametersSetName\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 266,\n      columnNumber: 11\n    }\n  }), errors.parametersSetName && errors.parametersSetName.type === \"validate\" && \"Parameters name already exists!\"), /*#__PURE__*/React.createElement(TextField, {\n    error: (errors === null || errors === void 0 ? void 0 : (_errors$parametersPro = errors.parametersPromptName) === null || _errors$parametersPro === void 0 ? void 0 : _errors$parametersPro.type) || (errors === null || errors === void 0 ? void 0 : (_errors$parametersPro2 = errors.parametersPromptName) === null || _errors$parametersPro2 === void 0 ? void 0 : _errors$parametersPro2.message) || (errors === null || errors === void 0 ? void 0 : errors.parametersPromptName),\n    register: register,\n    required: true,\n    style: {\n      width: \"100%\",\n      margin: \"0 0 15px 0\"\n    },\n    onChange: e => {\n      dispatch(savedNewParametersSetSettings(false));\n      dispatch(setNewParametersSetState({ ...newParametersSet,\n        parametersPromptName: e.target.value\n      }));\n    },\n    label: \"Prompt\",\n    name: \"parametersPromptName\",\n    value: parametersPromptName || get(editedParametersSet, \"parametersPromptName\"),\n    inputRef: register({\n      validate: value => {\n        return isEmpty(parameters.filter(d => {\n          if (d.parametersSetName === get(editedParametersSet, \"parametersPromptName\")) {\n            return false;\n          }\n\n          return d.parametersSetName === value;\n        }));\n      },\n      maxLength: {\n        value: maxNameLength,\n        message: \"Max 20 letters\"\n      },\n      minLength: {\n        value: minNameLength,\n        message: \"Min 4 letters\"\n      }\n    }),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 273,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(\"div\", {\n    style: {\n      margin: \"0 0 10px 0\",\n      fontSize: \"12px\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 326,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(ErrorMessage, {\n    errors: errors,\n    name: \"parametersPromptName\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 332,\n      columnNumber: 11\n    }\n  }), errors.parametersPromptName && errors.parametersPromptName.type === \"validate\" && \"Prompt name already exists!\"), /*#__PURE__*/React.createElement(\"div\", {\n    style: {\n      display: \"flex\",\n      margin: \"0 0 15px 0\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 338,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(KeyboardDateTimePicker, {\n    name: \"parametersDate\",\n    format: \"DD MMM YYYY HH:mm\",\n    value: (parametersState === null || parametersState === void 0 ? void 0 : parametersState.selectedDate) || moment().utc().format(),\n    reqared: true,\n    onChange: date => {\n      dispatch(savedNewParametersSetSettings(false));\n      setParametersState({ ...parametersState,\n        selectedDate: date === null || date === void 0 ? void 0 : date._d\n      });\n      dispatch(setNewParametersSetState({ ...newParametersSet,\n        date: date === null || date === void 0 ? void 0 : date._d\n      }));\n    },\n    style: {\n      marginRight: \"40px\"\n    },\n    label: \"Date\",\n    showTodayButton: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 339,\n      columnNumber: 11\n    }\n  }), /*#__PURE__*/React.createElement(FormControl, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 363,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(InputLabel, {\n    htmlFor: \"select-filter-value\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 364,\n      columnNumber: 13\n    }\n  }, \"Date Type*\"), /*#__PURE__*/React.createElement(Select, {\n    inputRef: register,\n    control: control,\n    value: get(parametersState, \"dateType\") || get(editedParametersSet, \"dateType\"),\n    style: {\n      width: \"120px\"\n    },\n    required: true,\n    onChange: e => {\n      dispatch(savedNewParametersSetSettings(false));\n      setParametersState({ ...parametersState,\n        dateType: e.target.value\n      });\n      dispatch(setNewParametersSetState({ ...newParametersSet,\n        dateType: e.target.value\n      }));\n    },\n    inputProps: {\n      id: \"select-filter-value\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 365,\n      columnNumber: 13\n    }\n  }, dateType.map(({\n    value,\n    label\n  }) => {\n    return /*#__PURE__*/React.createElement(MenuItem, {\n      key: value,\n      value: value,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 395,\n        columnNumber: 19\n      }\n    }, label);\n  })))), [{\n    name: \"Allow blank value\",\n    type: \"allowBlankValue\"\n  }, {\n    name: \"Allow null value\",\n    type: \"allowNullValue\"\n  }, {\n    name: \"Allow multiple values\",\n    type: \"allowMultipleValues\"\n  }].map(({\n    name,\n    type\n  }) => {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      style: {\n        display: \"flex\",\n        alignItems: \"center\"\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 410,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(Checkbox, {\n      key: name,\n      checked: get(parametersState, `${type}`),\n      onChange: e => {\n        dispatch(savedNewParametersSetSettings(false));\n        setParametersState({ ...parametersState,\n          [type]: e.target.checked\n        });\n        dispatch(setNewParametersSetState({ ...newParametersSet,\n          [type]: e.target.checked\n        }));\n      },\n      color: \"primary\",\n      inputProps: {\n        \"aria-label\": \"secondary checkbox\"\n      },\n      style: {\n        margin: \"0 10px 0 0\"\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 411,\n        columnNumber: 15\n      }\n    }), name);\n  }), /*#__PURE__*/React.createElement(FormControl, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 438,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(InputLabel, {\n    htmlFor: \"select-filter-value\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 439,\n      columnNumber: 11\n    }\n  }, \"Visibility*\"), /*#__PURE__*/React.createElement(Select, {\n    inputRef: register,\n    control: control,\n    value: get(parametersState, \"visibility\") || get(editedParametersSet, \"visibility\"),\n    style: {\n      width: \"120px\"\n    },\n    required: true,\n    onChange: e => {\n      dispatch(savedNewParametersSetSettings(false));\n      setParametersState({ ...parametersState,\n        visibility: e.target.value\n      });\n      dispatch(setNewParametersSetState({ ...newParametersSet,\n        visibility: e.target.value\n      }));\n    },\n    inputProps: {\n      id: \"select-filter-value\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 440,\n      columnNumber: 11\n    }\n  }, [{\n    name: \"Visible\",\n    type: \"visible\"\n  }, {\n    name: \"Hidden\",\n    type: \"hidden\"\n  }, {\n    name: \"Internal\",\n    type: \"internal\"\n  }].map(({\n    name,\n    type\n  }) => {\n    return /*#__PURE__*/React.createElement(MenuItem, {\n      key: name,\n      value: type,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 475,\n        columnNumber: 17\n      }\n    }, name);\n  }))), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"assign-values\",\n    onClick: () => setIsOpenDialog(true),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 483,\n      columnNumber: 9\n    }\n  }, \"Assign Values >>\"), /*#__PURE__*/React.createElement(ParameterAssignValuesDialog, {\n    isOpenDialog: isOpenDialog,\n    setIsOpenDialog: setIsOpenDialog,\n    setParametersState: setParametersState,\n    parametersState: parametersState,\n    newParametersSet: newParametersSet,\n    dispatch: dispatch,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 487,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"bts-box \",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 496,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"input\", {\n    type: \"submit\",\n    className: \"save-btn\",\n    value: \"Save\",\n    onClick: () => {\n      if (parametersSetName && parametersSetName.length >= minNameLength && parametersSetName.length <= maxNameLength && parametersPromptName && parametersPromptName.length >= minNameLength && parametersPromptName.length <= maxNameLength && get(parametersState, \"dateType\") && get(parametersState, \"visibility\") && isEmpty(parameters.filter(d => {\n        if (d.parametersSetName === get(editedParametersSet, \"parametersSetName\")) {\n          return false;\n        }\n\n        return d.parametersSetName === parametersSetName;\n      }))) {\n        dispatch(savedNewParametersSetSettings(true));\n        dispatch(setReportParameters(editedParametersSet ? parameters.map(d => {\n          return (d === null || d === void 0 ? void 0 : d.id) === (editedParametersSet === null || editedParametersSet === void 0 ? void 0 : editedParametersSet.id) ? newParametersSet : d;\n        }) : [...parameters, { ...newParametersSet,\n          date: (parametersState === null || parametersState === void 0 ? void 0 : parametersState.selectedDate) || moment().utc().format()\n        }]));\n        editedParametersSet && setHiddenEditControlBtn(false);\n        editedParametersSet && setEditParametersSetId(null);\n        isShownAlert && dispatch(showAlert(false));\n        dispatch(setNewParametersSetState({}));\n        setIsOpen(false);\n      }\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 497,\n      columnNumber: 11\n    }\n  }), /*#__PURE__*/React.createElement(\"button\", {\n    className: \"close-btn\",\n    onClick: () => {\n      isShownAlert && dispatch(showAlert(false));\n      dispatch(savedNewParametersSetSettings(true));\n      setIsOpen(false);\n      dispatch(setNewParametersSetState({}));\n      editedParametersSet && setEditParametersSetId(null);\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 551,\n      columnNumber: 11\n    }\n  }, \"Close\"))));\n};\n\nNewParameters.defaultProps = {\n  minNameLength: 4,\n  maxNameLength: 20,\n  hideNewBtn: false\n};\nexport default NewParameters;","map":{"version":3,"sources":["/Users/admin/UDS/addons-reportbuilder/src/components/Sidebar/SidebarParameters/NewParameters.js"],"names":["React","useEffect","useState","useForm","ErrorMessage","useSelector","useDispatch","savedNewParametersSetSettings","setNewParametersSetState","setReportParameters","showAlert","styled","moment","isEmpty","get","TextField","KeyboardDateTimePicker","Button","InputLabel","Select","MenuItem","FormControl","Checkbox","Dialog","DialogActions","AppBar","Tab","Paper","TabContext","TabList","TabPanel","DialogTitle","Radio","IconButton","DeleteIcon","ParameterAssignValuesDialog","dateType","value","label","NewParametersComp","div","NewParameters","minNameLength","maxNameLength","editedParametersSet","isHiddenControlBtn","setEditParametersSetId","isOpen","setIsOpen","isOpenDialog","setIsOpenDialog","parametersState","setParametersState","isHiddenEditControlBtn","setHiddenEditControlBtn","state","app","newParametersSet","parameters","isShownAlert","isSavedNewParametersData","dispatch","handleSubmit","register","errors","watch","control","onSubmit","parametersSetName","parametersPromptName","entities","length","id","Date","getTime","position","left","transform","bottom","display","flexDirection","type","message","width","margin","e","target","validate","filter","d","maxLength","minLength","fontSize","selectedDate","utc","format","date","_d","marginRight","map","name","alignItems","checked","visibility","defaultProps","hideNewBtn"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport { useForm, ErrorMessage } from \"react-hook-form\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport {\n  savedNewParametersSetSettings,\n  setNewParametersSetState,\n  setReportParameters,\n  showAlert,\n} from \"../../../redux/actions/app_action\";\n\nimport styled from \"styled-components\";\nimport moment from \"moment\";\n\n// LODASH\n\nimport isEmpty from \"lodash/isEmpty\";\nimport get from \"lodash/get\";\n\n// material-ui\n\nimport TextField from \"@material-ui/core/TextField\";\nimport { KeyboardDateTimePicker } from \"@material-ui/pickers\";\nimport Button from \"@material-ui/core/Button\";\nimport InputLabel from \"@material-ui/core/InputLabel\";\nimport Select from \"@material-ui/core/Select\";\nimport MenuItem from \"@material-ui/core/MenuItem\";\nimport FormControl from \"@material-ui/core/FormControl\";\nimport Checkbox from \"@material-ui/core/Checkbox\";\nimport Dialog from \"@material-ui/core/Dialog\";\nimport DialogActions from \"@material-ui/core/DialogActions\";\nimport AppBar from \"@material-ui/core/AppBar\";\nimport Tab from \"@material-ui/core/Tab\";\nimport Paper from \"@material-ui/core/Paper\";\nimport TabContext from \"@material-ui/lab/TabContext\";\nimport TabList from \"@material-ui/lab/TabList\";\nimport TabPanel from \"@material-ui/lab/TabPanel\";\nimport DialogTitle from \"@material-ui/core/DialogTitle\";\nimport Radio from \"@material-ui/core/Radio\";\nimport IconButton from \"@material-ui/core/IconButton\";\nimport DeleteIcon from \"@material-ui/icons/Delete\";\nimport ParameterAssignValuesDialog from \"./views/ParameterAssignValuesDialog\";\n\nconst dateType = [\n  {\n    value: \"string\",\n    label: \"String\",\n  },\n  {\n    value: \"boolean\",\n    label: \"Boolean\",\n  },\n  {\n    value: \"dateTime\",\n    label: \"DateTime\",\n  },\n  {\n    value: \"integer\",\n    label: \"Integer\",\n  },\n  {\n    value: \"float\",\n    label: \"Float\",\n  },\n];\n\nconst NewParametersComp = styled.div`\n  width: calc(100% - 40px);\n  height: 100%;\n  position: absolute;\n  top: 0;\n  left: 0;\n  padding: 20px;\n  background: aliceblue;\n\n  .bts-box {\n    display: flex;\n    justify-content: flex-end;\n    position: absolute;\n    bottom: 100px;\n    right: 20px;\n\n    .save-btn,\n    .close-btn {\n      padding: 10px 25px;\n      border: 1px solid #ccc;\n      border-radius: 4px;\n      box-shadow: 0 3px 3px -2px rgba(0, 0, 0, 0.2),\n        0px 3px 4px 0px rgba(0, 0, 0, 0.14), 0px 1px 8px 0px rgba(0, 0, 0, 0.12);\n      margin: 0 0 0 15px;\n      transition: 0.3s;\n      &:hover {\n        cursor: pointer;\n        background: #ccc;\n        transition: 0.3s;\n      }\n      &:focus {\n        outline: none;\n        background: #ccc;\n      }\n    }\n  }\n\n  .assign-values {\n    margin: 20px 0;\n    text-decoration: underline;\n    font-size: 14px;\n    color: dodgerblue;\n    &:hover {\n      cursor: pointer;\n    }\n  }\n`;\n\nconst NewParameters = ({\n  minNameLength,\n  maxNameLength,\n  editedParametersSet,\n  isHiddenControlBtn,\n  setEditParametersSetId,\n}) => {\n  const [isOpen, setIsOpen] = useState(false);\n  const [isOpenDialog, setIsOpenDialog] = useState(false);\n  const [parametersState, setParametersState] = useState({\n    ...editedParametersSet,\n  });\n\n  const [isHiddenEditControlBtn, setHiddenEditControlBtn] = useState(\n    isHiddenControlBtn\n  );\n\n  const state = useSelector((state) => state.app);\n  const {\n    newParametersSet,\n    parameters,\n    isShownAlert,\n    isSavedNewParametersData,\n  } = state;\n  const dispatch = useDispatch();\n\n  const {\n    handleSubmit,\n    register,\n    errors,\n    watch,\n    control,\n    onSubmit,\n  } = useForm();\n\n  let parametersSetName = watch(\"parametersSetName\");\n  let parametersPromptName = watch(\"parametersPromptName\");\n\n  // EDIT DATASET\n\n  useEffect(() => {\n    editedParametersSet &&\n      dispatch(setNewParametersSetState(editedParametersSet));\n  }, [\n    editedParametersSet,\n    get(editedParametersSet, \"entities\") && editedParametersSet.entities.length,\n  ]);\n\n  // LOADING DATASETS OPT\n\n  useEffect(() => {\n    isOpen &&\n      dispatch(\n        setNewParametersSetState({\n          ...newParametersSet,\n          id: new Date().getTime(),\n        })\n      );\n  }, [isOpen]);\n\n  if (!isOpen && isSavedNewParametersData && !isHiddenEditControlBtn) {\n    return (\n      <div\n        style={{\n          position: \"absolute\",\n          left: \"50%\",\n          transform: \"translateX(-50%)\",\n          bottom: \"60px\",\n        }}\n      >\n        <Button\n          onClick={() => {\n            setIsOpen(true);\n            dispatch(\n              setNewParametersSetState({\n                id: new Date().getTime(),\n              })\n            );\n          }}\n          variant=\"contained\"\n          color=\"primary\"\n        >\n          New parameters\n        </Button>\n      </div>\n    );\n  }\n\n  return (\n    <NewParametersComp>\n      <form\n        onSubmit={handleSubmit(onSubmit)}\n        style={{ display: \"flex\", flexDirection: \"column\" }}\n      >\n        <TextField\n          error={\n            errors?.parametersSetName?.type ||\n            errors?.parametersSetName?.message ||\n            errors?.parametersSetName\n          }\n          register={register}\n          required\n          style={{\n            width: \"100%\",\n            margin: \"0 0 15px 0\",\n          }}\n          onChange={(e) => {\n            dispatch(\n              setNewParametersSetState({\n                ...newParametersSet,\n                parametersSetName: e.target.value,\n              })\n            );\n            dispatch(savedNewParametersSetSettings(false));\n          }}\n          label=\"Name\"\n          name=\"parametersSetName\"\n          value={\n            parametersSetName || get(editedParametersSet, \"parametersSetName\")\n          }\n          inputRef={register({\n            validate: (value) => {\n              return isEmpty(\n                parameters.filter((d) => {\n                  if (\n                    d.parametersSetName ===\n                    get(editedParametersSet, \"parametersSetName\")\n                  ) {\n                    return false;\n                  }\n\n                  return d.parametersSetName === value;\n                })\n              );\n            },\n            maxLength: {\n              value: maxNameLength,\n              message: \"Max 20 letters\",\n            },\n            minLength: {\n              value: minNameLength,\n              message: \"Min 4 letters\",\n            },\n          })}\n        />\n\n        <div\n          style={{\n            margin: \"0 0 10px 0\",\n            fontSize: \"12px\",\n          }}\n        >\n          <ErrorMessage errors={errors} name=\"parametersSetName\" />\n\n          {errors.parametersSetName &&\n            errors.parametersSetName.type === \"validate\" &&\n            \"Parameters name already exists!\"}\n        </div>\n\n        <TextField\n          error={\n            errors?.parametersPromptName?.type ||\n            errors?.parametersPromptName?.message ||\n            errors?.parametersPromptName\n          }\n          register={register}\n          required\n          style={{\n            width: \"100%\",\n            margin: \"0 0 15px 0\",\n          }}\n          onChange={(e) => {\n            dispatch(savedNewParametersSetSettings(false));\n            dispatch(\n              setNewParametersSetState({\n                ...newParametersSet,\n                parametersPromptName: e.target.value,\n              })\n            );\n          }}\n          label=\"Prompt\"\n          name=\"parametersPromptName\"\n          value={\n            parametersPromptName ||\n            get(editedParametersSet, \"parametersPromptName\")\n          }\n          inputRef={register({\n            validate: (value) => {\n              return isEmpty(\n                parameters.filter((d) => {\n                  if (\n                    d.parametersSetName ===\n                    get(editedParametersSet, \"parametersPromptName\")\n                  ) {\n                    return false;\n                  }\n\n                  return d.parametersSetName === value;\n                })\n              );\n            },\n            maxLength: {\n              value: maxNameLength,\n              message: \"Max 20 letters\",\n            },\n            minLength: {\n              value: minNameLength,\n              message: \"Min 4 letters\",\n            },\n          })}\n        />\n\n        <div\n          style={{\n            margin: \"0 0 10px 0\",\n            fontSize: \"12px\",\n          }}\n        >\n          <ErrorMessage errors={errors} name=\"parametersPromptName\" />\n\n          {errors.parametersPromptName &&\n            errors.parametersPromptName.type === \"validate\" &&\n            \"Prompt name already exists!\"}\n        </div>\n        <div style={{ display: \"flex\", margin: \"0 0 15px 0\" }}>\n          <KeyboardDateTimePicker\n            name=\"parametersDate\"\n            format=\"DD MMM YYYY HH:mm\"\n            value={parametersState?.selectedDate || moment().utc().format()}\n            reqared\n            onChange={(date) => {\n              dispatch(savedNewParametersSetSettings(false));\n\n              setParametersState({\n                ...parametersState,\n                selectedDate: date?._d,\n              });\n\n              dispatch(\n                setNewParametersSetState({\n                  ...newParametersSet,\n                  date: date?._d,\n                })\n              );\n            }}\n            style={{ marginRight: \"40px\" }}\n            label=\"Date\"\n            showTodayButton\n          />\n          <FormControl>\n            <InputLabel htmlFor=\"select-filter-value\">Date Type*</InputLabel>\n            <Select\n              inputRef={register}\n              control={control}\n              value={\n                get(parametersState, \"dateType\") ||\n                get(editedParametersSet, \"dateType\")\n              }\n              style={{\n                width: \"120px\",\n              }}\n              required\n              onChange={(e) => {\n                dispatch(savedNewParametersSetSettings(false));\n                setParametersState({\n                  ...parametersState,\n                  dateType: e.target.value,\n                });\n                dispatch(\n                  setNewParametersSetState({\n                    ...newParametersSet,\n                    dateType: e.target.value,\n                  })\n                );\n              }}\n              inputProps={{\n                id: \"select-filter-value\",\n              }}\n            >\n              {dateType.map(({ value, label }) => {\n                return (\n                  <MenuItem key={value} value={value}>\n                    {label}\n                  </MenuItem>\n                );\n              })}\n            </Select>\n          </FormControl>\n        </div>\n\n        {[\n          { name: \"Allow blank value\", type: \"allowBlankValue\" },\n          { name: \"Allow null value\", type: \"allowNullValue\" },\n          { name: \"Allow multiple values\", type: \"allowMultipleValues\" },\n        ].map(({ name, type }) => {\n          return (\n            <div style={{ display: \"flex\", alignItems: \"center\" }}>\n              <Checkbox\n                key={name}\n                checked={get(parametersState, `${type}`)}\n                onChange={(e) => {\n                  dispatch(savedNewParametersSetSettings(false));\n\n                  setParametersState({\n                    ...parametersState,\n                    [type]: e.target.checked,\n                  });\n\n                  dispatch(\n                    setNewParametersSetState({\n                      ...newParametersSet,\n                      [type]: e.target.checked,\n                    })\n                  );\n                }}\n                color=\"primary\"\n                inputProps={{ \"aria-label\": \"secondary checkbox\" }}\n                style={{ margin: \"0 10px 0 0\" }}\n              />\n              {name}\n            </div>\n          );\n        })}\n\n        <FormControl>\n          <InputLabel htmlFor=\"select-filter-value\">Visibility*</InputLabel>\n          <Select\n            inputRef={register}\n            control={control}\n            value={\n              get(parametersState, \"visibility\") ||\n              get(editedParametersSet, \"visibility\")\n            }\n            style={{\n              width: \"120px\",\n            }}\n            required\n            onChange={(e) => {\n              dispatch(savedNewParametersSetSettings(false));\n\n              setParametersState({\n                ...parametersState,\n                visibility: e.target.value,\n              });\n              dispatch(\n                setNewParametersSetState({\n                  ...newParametersSet,\n                  visibility: e.target.value,\n                })\n              );\n            }}\n            inputProps={{\n              id: \"select-filter-value\",\n            }}\n          >\n            {[\n              { name: \"Visible\", type: \"visible\" },\n              { name: \"Hidden\", type: \"hidden\" },\n              { name: \"Internal\", type: \"internal\" },\n            ].map(({ name, type }) => {\n              return (\n                <MenuItem key={name} value={type}>\n                  {name}\n                </MenuItem>\n              );\n            })}\n          </Select>\n        </FormControl>\n\n        <div className=\"assign-values\" onClick={() => setIsOpenDialog(true)}>\n          Assign Values >>\n        </div>\n\n        <ParameterAssignValuesDialog\n          isOpenDialog={isOpenDialog}\n          setIsOpenDialog={setIsOpenDialog}\n          setParametersState={setParametersState}\n          parametersState={parametersState}\n          newParametersSet={newParametersSet}\n          dispatch={dispatch}\n        />\n\n        <div className=\"bts-box \">\n          <input\n            type=\"submit\"\n            className=\"save-btn\"\n            value=\"Save\"\n            onClick={() => {\n              if (\n                parametersSetName &&\n                parametersSetName.length >= minNameLength &&\n                parametersSetName.length <= maxNameLength &&\n                parametersPromptName &&\n                parametersPromptName.length >= minNameLength &&\n                parametersPromptName.length <= maxNameLength &&\n                get(parametersState, \"dateType\") &&\n                get(parametersState, \"visibility\") &&\n                isEmpty(\n                  parameters.filter((d) => {\n                    if (\n                      d.parametersSetName ===\n                      get(editedParametersSet, \"parametersSetName\")\n                    ) {\n                      return false;\n                    }\n                    return d.parametersSetName === parametersSetName;\n                  })\n                )\n              ) {\n                dispatch(savedNewParametersSetSettings(true));\n                dispatch(\n                  setReportParameters(\n                    editedParametersSet\n                      ? parameters.map((d) => {\n                          return d?.id === editedParametersSet?.id\n                            ? newParametersSet\n                            : d;\n                        })\n                      : [\n                          ...parameters,\n                          {\n                            ...newParametersSet,\n                            date:\n                              parametersState?.selectedDate ||\n                              moment().utc().format(),\n                          },\n                        ]\n                  )\n                );\n                editedParametersSet && setHiddenEditControlBtn(false);\n                editedParametersSet && setEditParametersSetId(null);\n                isShownAlert && dispatch(showAlert(false));\n                dispatch(setNewParametersSetState({}));\n                setIsOpen(false);\n              }\n            }}\n          />\n          <button\n            className=\"close-btn\"\n            onClick={() => {\n              isShownAlert && dispatch(showAlert(false));\n              dispatch(savedNewParametersSetSettings(true));\n              setIsOpen(false);\n              dispatch(setNewParametersSetState({}));\n              editedParametersSet && setEditParametersSetId(null);\n            }}\n          >\n            Close\n          </button>\n        </div>\n      </form>\n    </NewParametersComp>\n  );\n};\n\nNewParameters.defaultProps = {\n  minNameLength: 4,\n  maxNameLength: 20,\n  hideNewBtn: false,\n};\n\nexport default NewParameters;\n"]},"metadata":{},"sourceType":"module"}