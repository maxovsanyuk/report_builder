{"ast":null,"code":"var _jsxFileName = \"/Users/admin/UDS/addons-reportbuilder/src/components/Sidebar/SidebarData/views/FilterCombinedComponent.js\";\nimport React, { useEffect, useState } from \"react\";\nimport { DefineInputTypeForCombinedFilter } from \"./DefineInputType\"; // MATERIAL UI\n\nimport Paper from \"@material-ui/core/Paper\";\nimport MenuItem from \"@material-ui/core/MenuItem\";\nimport FormControl from \"@material-ui/core/FormControl\";\nimport InputLabel from \"@material-ui/core/InputLabel\";\nimport Select from \"@material-ui/core/Select\";\nimport ListSubheader from \"@material-ui/core/ListSubheader\"; // LODASH\n\nimport isEmpty from \"lodash/isEmpty\";\nimport get from \"lodash/get\";\nimport { getFieldTypes } from \"../halpers/getFieldTypes\";\nimport { findChangedFilter } from \"../halpers/findChangedFilter\";\n\nconst FilterCombinedComponent = ({\n  filterState,\n  entitiState,\n  setEntitiState,\n  setIsFullEntitie,\n  filterData,\n  register,\n  control,\n  filterId\n}) => {\n  var _combinedFiltertstate, _entitiState$dataSetF, _combinedFiltertstate2, _combinedFiltertstate4, _combinedFiltertstate5;\n\n  const [combinedFiltertstate, setCombinedFiltertstate] = useState(filterState);\n  useEffect(() => {\n    combinedFiltertstate && !(combinedFiltertstate === null || combinedFiltertstate === void 0 ? void 0 : combinedFiltertstate.operatorValue) ? setIsFullEntitie(false) : setIsFullEntitie(true);\n  }, [combinedFiltertstate && combinedFiltertstate.operatorValue]);\n  console.log();\n  return /*#__PURE__*/React.createElement(Paper, {\n    style: {\n      display: \"flex\",\n      justifyContent: \"space-between\",\n      margin: \"10px 0\",\n      padding: \"5px 10px 15px 10px\",\n      minWidth: \"400px\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(FormControl, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(InputLabel, {\n    htmlFor: \"select-filter-label\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 9\n    }\n  }, \"Filter fields*\"), /*#__PURE__*/React.createElement(Select, {\n    style: {\n      width: \"120px\"\n    },\n    value: combinedFiltertstate === null || combinedFiltertstate === void 0 ? void 0 : (_combinedFiltertstate = combinedFiltertstate.filterFieldType) === null || _combinedFiltertstate === void 0 ? void 0 : _combinedFiltertstate.label,\n    renderValue: () => {\n      return /*#__PURE__*/React.createElement(\"div\", {\n        style: {\n          maxWidth: \"80px\",\n          overflow: \"hidden\",\n          textOverflow: \"ellipsis\"\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 60,\n          columnNumber: 15\n        }\n      }, get(combinedFiltertstate, \"filterFieldType.label\"));\n    },\n    required: true,\n    name: \"filterFieldType\",\n    inputRef: register,\n    control: control,\n    onChange: e => {\n      setCombinedFiltertstate({ ...combinedFiltertstate,\n        operatorValue: \"\",\n        filterFieldType: e.target.value,\n        operatorsField: getFieldTypes(get(e, \"target.value.valueType\"))\n      });\n      setEntitiState({ ...entitiState,\n        filterChangedId: new Date().getTime(),\n        filtersList: entitiState === null || entitiState === void 0 ? void 0 : entitiState.filtersList.map(f => {\n          var _f$items, _filterState$filterFi2;\n\n          return f.filterId === (filterData === null || filterData === void 0 ? void 0 : filterData.filterId) ? { ...f,\n            items: f === null || f === void 0 ? void 0 : (_f$items = f.items) === null || _f$items === void 0 ? void 0 : _f$items.map(i => {\n              var _filterState$filterFi;\n\n              return i.filterId === filterId ? { ...i,\n                operatorValue: \"\",\n                filterFieldType: e.target.value,\n                operatorsField: getFieldTypes(filterState === null || filterState === void 0 ? void 0 : (_filterState$filterFi = filterState.filterFieldType) === null || _filterState$filterFi === void 0 ? void 0 : _filterState$filterFi.valueType)\n              } : i;\n            })\n          } : findChangedFilter(f, filterData === null || filterData === void 0 ? void 0 : filterData.filterId, filterId, {\n            operatorValue: \"\",\n            filterFieldType: e.target.value,\n            operatorsField: getFieldTypes(filterState === null || filterState === void 0 ? void 0 : (_filterState$filterFi2 = filterState.filterFieldType) === null || _filterState$filterFi2 === void 0 ? void 0 : _filterState$filterFi2.valueType)\n          });\n        })\n      });\n    },\n    inputProps: {\n      id: \"select-filter-label\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(ListSubheader, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 117,\n      columnNumber: 11\n    }\n  }, \"Fields\"), !isEmpty(entitiState) && (entitiState === null || entitiState === void 0 ? void 0 : (_entitiState$dataSetF = entitiState.dataSetFields) === null || _entitiState$dataSetF === void 0 ? void 0 : _entitiState$dataSetF.items.filter(i => i.type === \"field\").map(f => {\n    return /*#__PURE__*/React.createElement(MenuItem, {\n      key: f.value,\n      value: f,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 123,\n        columnNumber: 19\n      }\n    }, f.label);\n  })))), /*#__PURE__*/React.createElement(FormControl, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 130,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(InputLabel, {\n    htmlFor: \"select-filter-operators\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 131,\n      columnNumber: 9\n    }\n  }, \"Operators*\"), /*#__PURE__*/React.createElement(Select, {\n    value: combinedFiltertstate === null || combinedFiltertstate === void 0 ? void 0 : (_combinedFiltertstate2 = combinedFiltertstate.operatorType) === null || _combinedFiltertstate2 === void 0 ? void 0 : _combinedFiltertstate2.label,\n    renderValue: () => {\n      var _combinedFiltertstate3;\n\n      return /*#__PURE__*/React.createElement(\"div\", {\n        style: {\n          maxWidth: \"80px\",\n          overflow: \"hidden\",\n          textOverflow: \"ellipsis\"\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 136,\n          columnNumber: 15\n        }\n      }, combinedFiltertstate === null || combinedFiltertstate === void 0 ? void 0 : (_combinedFiltertstate3 = combinedFiltertstate.operatorType) === null || _combinedFiltertstate3 === void 0 ? void 0 : _combinedFiltertstate3.label);\n    },\n    name: \"operatorType\",\n    inputRef: register,\n    control: control,\n    style: {\n      width: \"100px\"\n    },\n    required: true,\n    onChange: e => {\n      setEntitiState({ ...entitiState,\n        filterChangedId: new Date().getTime(),\n        filtersList: entitiState === null || entitiState === void 0 ? void 0 : entitiState.filtersList.map(f => {\n          var _f$items2;\n\n          return f.filterId === filterData.filterId ? { ...f,\n            items: f === null || f === void 0 ? void 0 : (_f$items2 = f.items) === null || _f$items2 === void 0 ? void 0 : _f$items2.map(i => {\n              return i.filterId === filterId ? { ...i,\n                operatorType: e.target.value\n              } : i;\n            })\n          } : findChangedFilter(f, filterData.filterId, filterId, {\n            operatorType: e.target.value\n          });\n        })\n      });\n      setCombinedFiltertstate({ ...combinedFiltertstate,\n        operatorType: e.target.value\n      });\n    },\n    inputProps: {\n      id: \"select-filter-operators\",\n      disabled: !get(combinedFiltertstate, \"operatorsField\")\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 132,\n      columnNumber: 9\n    }\n  }, get(combinedFiltertstate, \"operatorsField.operatorsField\") && (combinedFiltertstate === null || combinedFiltertstate === void 0 ? void 0 : combinedFiltertstate.operatorsField) ? combinedFiltertstate === null || combinedFiltertstate === void 0 ? void 0 : (_combinedFiltertstate4 = combinedFiltertstate.operatorsField) === null || _combinedFiltertstate4 === void 0 ? void 0 : _combinedFiltertstate4.operatorsField.map(o => {\n    return /*#__PURE__*/React.createElement(MenuItem, {\n      key: o.value,\n      value: o,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 191,\n        columnNumber: 17\n      }\n    }, o.label);\n  }) : /*#__PURE__*/React.createElement(MenuItem, {\n    value: null,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 197,\n      columnNumber: 13\n    }\n  }, \"Empty\"))), /*#__PURE__*/React.createElement(FormControl, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 201,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(DefineInputTypeForCombinedFilter, {\n    type: combinedFiltertstate === null || combinedFiltertstate === void 0 ? void 0 : (_combinedFiltertstate5 = combinedFiltertstate.operatorsField) === null || _combinedFiltertstate5 === void 0 ? void 0 : _combinedFiltertstate5.type,\n    filterState: combinedFiltertstate,\n    setFilterState: setCombinedFiltertstate,\n    setEntitiState: setEntitiState,\n    entitiState: entitiState,\n    filterData: filterData,\n    filterId: filterId,\n    control: control,\n    register: register,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 202,\n      columnNumber: 9\n    }\n  })));\n};\n\nexport default FilterCombinedComponent;","map":{"version":3,"sources":["/Users/admin/UDS/addons-reportbuilder/src/components/Sidebar/SidebarData/views/FilterCombinedComponent.js"],"names":["React","useEffect","useState","DefineInputTypeForCombinedFilter","Paper","MenuItem","FormControl","InputLabel","Select","ListSubheader","isEmpty","get","getFieldTypes","findChangedFilter","FilterCombinedComponent","filterState","entitiState","setEntitiState","setIsFullEntitie","filterData","register","control","filterId","combinedFiltertstate","setCombinedFiltertstate","operatorValue","console","log","display","justifyContent","margin","padding","minWidth","width","filterFieldType","label","maxWidth","overflow","textOverflow","e","target","value","operatorsField","filterChangedId","Date","getTime","filtersList","map","f","items","i","valueType","id","dataSetFields","filter","type","operatorType","disabled","o"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from \"react\";\n\nimport { DefineInputTypeForCombinedFilter } from \"./DefineInputType\";\n\n// MATERIAL UI\n\nimport Paper from \"@material-ui/core/Paper\";\nimport MenuItem from \"@material-ui/core/MenuItem\";\nimport FormControl from \"@material-ui/core/FormControl\";\nimport InputLabel from \"@material-ui/core/InputLabel\";\nimport Select from \"@material-ui/core/Select\";\nimport ListSubheader from \"@material-ui/core/ListSubheader\";\n\n// LODASH\n\nimport isEmpty from \"lodash/isEmpty\";\nimport get from \"lodash/get\";\nimport { getFieldTypes } from \"../halpers/getFieldTypes\";\nimport { findChangedFilter } from \"../halpers/findChangedFilter\";\n\nconst FilterCombinedComponent = ({\n  filterState,\n  entitiState,\n  setEntitiState,\n  setIsFullEntitie,\n  filterData,\n  register,\n  control,\n  filterId,\n}) => {\n  const [combinedFiltertstate, setCombinedFiltertstate] = useState(filterState);\n\n  useEffect(() => {\n    combinedFiltertstate && !combinedFiltertstate?.operatorValue\n      ? setIsFullEntitie(false)\n      : setIsFullEntitie(true);\n  }, [combinedFiltertstate && combinedFiltertstate.operatorValue]);\n\n  console.log();\n\n  return (\n    <Paper\n      style={{\n        display: \"flex\",\n        justifyContent: \"space-between\",\n        margin: \"10px 0\",\n        padding: \"5px 10px 15px 10px\",\n        minWidth: \"400px\",\n      }}\n    >\n      <FormControl>\n        <InputLabel htmlFor=\"select-filter-label\">Filter fields*</InputLabel>\n        <Select\n          style={{\n            width: \"120px\",\n          }}\n          value={combinedFiltertstate?.filterFieldType?.label}\n          renderValue={() => {\n            return (\n              <div\n                style={{\n                  maxWidth: \"80px\",\n                  overflow: \"hidden\",\n                  textOverflow: \"ellipsis\",\n                }}\n              >\n                {get(combinedFiltertstate, \"filterFieldType.label\")}\n              </div>\n            );\n          }}\n          required\n          name=\"filterFieldType\"\n          inputRef={register}\n          control={control}\n          onChange={(e) => {\n            setCombinedFiltertstate({\n              ...combinedFiltertstate,\n              operatorValue: \"\",\n              filterFieldType: e.target.value,\n              operatorsField: getFieldTypes(get(e, \"target.value.valueType\")),\n            });\n\n            setEntitiState({\n              ...entitiState,\n              filterChangedId: new Date().getTime(),\n              filtersList: entitiState?.filtersList.map((f) => {\n                return f.filterId === filterData?.filterId\n                  ? {\n                      ...f,\n                      items: f?.items?.map((i) => {\n                        return i.filterId === filterId\n                          ? {\n                              ...i,\n                              operatorValue: \"\",\n                              filterFieldType: e.target.value,\n                              operatorsField: getFieldTypes(\n                                filterState?.filterFieldType?.valueType\n                              ),\n                            }\n                          : i;\n                      }),\n                    }\n                  : findChangedFilter(f, filterData?.filterId, filterId, {\n                      operatorValue: \"\",\n                      filterFieldType: e.target.value,\n                      operatorsField: getFieldTypes(\n                        filterState?.filterFieldType?.valueType\n                      ),\n                    });\n              }),\n            });\n          }}\n          inputProps={{\n            id: \"select-filter-label\",\n          }}\n        >\n          <ListSubheader>Fields</ListSubheader>\n          {!isEmpty(entitiState) &&\n            entitiState?.dataSetFields?.items\n              .filter((i) => i.type === \"field\")\n              .map((f) => {\n                return (\n                  <MenuItem key={f.value} value={f}>\n                    {f.label}\n                  </MenuItem>\n                );\n              })}\n        </Select>\n      </FormControl>\n      <FormControl>\n        <InputLabel htmlFor=\"select-filter-operators\">Operators*</InputLabel>\n        <Select\n          value={combinedFiltertstate?.operatorType?.label}\n          renderValue={() => {\n            return (\n              <div\n                style={{\n                  maxWidth: \"80px\",\n                  overflow: \"hidden\",\n                  textOverflow: \"ellipsis\",\n                }}\n              >\n                {combinedFiltertstate?.operatorType?.label}\n              </div>\n            );\n          }}\n          name=\"operatorType\"\n          inputRef={register}\n          control={control}\n          style={{\n            width: \"100px\",\n          }}\n          required\n          onChange={(e) => {\n            setEntitiState({\n              ...entitiState,\n              filterChangedId: new Date().getTime(),\n              filtersList: entitiState?.filtersList.map((f) => {\n                return f.filterId === filterData.filterId\n                  ? {\n                      ...f,\n                      items: f?.items?.map((i) => {\n                        return i.filterId === filterId\n                          ? {\n                              ...i,\n                              operatorType: e.target.value,\n                            }\n                          : i;\n                      }),\n                    }\n                  : findChangedFilter(f, filterData.filterId, filterId, {\n                      operatorType: e.target.value,\n                    });\n              }),\n            });\n\n            setCombinedFiltertstate({\n              ...combinedFiltertstate,\n              operatorType: e.target.value,\n            });\n          }}\n          inputProps={{\n            id: \"select-filter-operators\",\n            disabled: !get(combinedFiltertstate, \"operatorsField\"),\n          }}\n        >\n          {get(combinedFiltertstate, \"operatorsField.operatorsField\") &&\n          combinedFiltertstate?.operatorsField ? (\n            combinedFiltertstate?.operatorsField?.operatorsField.map((o) => {\n              return (\n                <MenuItem key={o.value} value={o}>\n                  {o.label}\n                </MenuItem>\n              );\n            })\n          ) : (\n            <MenuItem value={null}>Empty</MenuItem>\n          )}\n        </Select>\n      </FormControl>\n      <FormControl>\n        <DefineInputTypeForCombinedFilter\n          type={combinedFiltertstate?.operatorsField?.type}\n          filterState={combinedFiltertstate}\n          setFilterState={setCombinedFiltertstate}\n          setEntitiState={setEntitiState}\n          entitiState={entitiState}\n          filterData={filterData}\n          filterId={filterId}\n          control={control}\n          register={register}\n        />\n      </FormControl>\n    </Paper>\n  );\n};\n\nexport default FilterCombinedComponent;\n"]},"metadata":{},"sourceType":"module"}