{"ast":null,"code":"var _jsxFileName = \"/Users/admin/UDS/addons-reportbuilder/src/components/Sidebar/SidebarData/SideBarData.js\";\nimport React, { useState } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { setDataSets } from \"../../../redux/actions/app_action\";\nimport NewDataSetList from \"./NewDataSetList/NewDataSetList\";\nimport { AnimatedComponent } from \"../../views/AnimatedComponent\";\nimport EntityRow from \"./views/EntitiRow\";\nimport styled from \"styled-components\"; // MATERIAL UI\n\nimport IconButton from \"@material-ui/core/IconButton\";\nimport DeleteIcon from \"@material-ui/icons/Delete\";\nimport EditIcon from \"@material-ui/icons/Edit\"; // LODASH\n\nimport isEmpty from \"lodash/isEmpty\";\nconst DataSetListCont = styled.div`\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  position: relative;\n  flex: 1;\n  margin: 0 10px 20px 15px;\n  font-size: 20px;\n  padding: 10px;\n  box-shadow: 0 3px 3px -2px rgba(0, 0, 0, 0.2);\n  border-radius: 5px;\n  transition: 0.3s;\n  background: #fff;\n  &:hover {\n    cursor: pointer;\n    box-shadow: 0 3px 3px -2px rgba(0, 0, 0, 0.2),\n      0px 3px 4px 0px rgba(0, 0, 0, 0.14), 0px 1px 8px 0px rgba(0, 0, 0, 0.12);\n    transition: 0.3s;\n  }\n`;\n\nconst SideBarData = () => {\n  const [editDataSetId, setEditDataSetId] = useState(null);\n  const state = useSelector(state => state.app);\n  const {\n    dataSets,\n    newDataSet\n  } = state;\n  console.log(dataSets, \"dataSets\");\n  console.log(newDataSet, \"newDataSet\");\n  const dispatch = useDispatch();\n  return /*#__PURE__*/React.createElement(AnimatedComponent, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"h2\", {\n    style: {\n      textAlign: \"center\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 7\n    }\n  }, !isEmpty(dataSets) ? \"Data sets list\" : \"Create first DataSet\"), /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"div\", {\n    style: {\n      maxHeight: \"70vh\",\n      overflow: \"auto\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 9\n    }\n  }, !isEmpty(dataSets) && dataSets.map((d, i) => {\n    var _d$entities;\n\n    if (editDataSetId === d.id) {\n      return /*#__PURE__*/React.createElement(NewDataSetList, {\n        key: d.id,\n        editedDataSet: d,\n        isHiddenControlBtn: true,\n        setEditDataSetId: setEditDataSetId,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 63,\n          columnNumber: 19\n        }\n      });\n    }\n\n    return !editDataSetId && /*#__PURE__*/React.createElement(DataSetListCont, {\n      key: d.id,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 19\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      style: {\n        display: \"flex\",\n        flexDirection: \"column\"\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(\"span\", {\n      style: {\n        margin: \"0 0 5px 0\",\n        fontWeight: 600\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 23\n      }\n    }, d.dataSetName), d === null || d === void 0 ? void 0 : (_d$entities = d.entities) === null || _d$entities === void 0 ? void 0 : _d$entities.map(e => {\n      return /*#__PURE__*/React.createElement(EntityRow, {\n        key: e.id,\n        entiti: e,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 81,\n          columnNumber: 32\n        }\n      });\n    })), /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(IconButton, {\n      component: \"span\",\n      onClick: () => {\n        setEditDataSetId(d.id);\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 23\n      }\n    }, /*#__PURE__*/React.createElement(EditIcon, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 91,\n        columnNumber: 25\n      }\n    })), /*#__PURE__*/React.createElement(IconButton, {\n      onClick: () => {\n        dispatch(setDataSets(dataSets === null || dataSets === void 0 ? void 0 : dataSets.filter(dataSet => dataSet.id !== d.id)));\n      },\n      component: \"span\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 93,\n        columnNumber: 23\n      }\n    }, /*#__PURE__*/React.createElement(DeleteIcon, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 103,\n        columnNumber: 25\n      }\n    }))));\n  })), !editDataSetId && /*#__PURE__*/React.createElement(NewDataSetList, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 111,\n      columnNumber: 28\n    }\n  })));\n};\n\nexport default SideBarData; // buildFetch = () => {\n//     const newEntities = cloneDeep(this.state.entities);\n//     const fetch = {\n//         'fetch': {\n//             'entity': {\n//                 '@name': newEntities[0].value.value,\n//             }\n//         }\n//     };\n//\n//     // adding 'attribute'\n//\n//     const attributes = newEntities[0].filtersOptions.filter(option => option.type === 'field' && option.chosen);\n//     if (attributes.length && attributes.length > 1) {\n//         fetch['fetch']['entity']['attribute'] = attributes.map(attribute => {\n//             return {\n//                 '@name': attribute.value\n//             }\n//         })\n//     }\n//     if (attributes.length && attributes.length === 1) {\n//         fetch['fetch']['entity']['attribute'] = {\n//             '@name': attributes[0].value\n//         };\n//     }\n//     if (!attributes.length) {\n//         fetch['fetch']['entity']['all-attributes'] = null;\n//     }\n//\n//     // adding 'filter'\n//\n//     const parseFilters = (filters) => {\n//         let result = filters.length > 1 ? [] : {};\n//         filters.forEach(filter => {\n//             if (filter.logicalType) {\n//                 const newElement = {\n//                     '@type': filter.logicalType\n//                 };\n//                 const conditionElements = filter.items.filter(item => !item.logicalType);\n//                 const conditionQuantity = conditionElements.length;\n//                 if (conditionQuantity && conditionQuantity > 1) {\n//                     newElement['condition'] = conditionElements.map(item => {\n//                         return {\n//                             '@attribute': item.field.value,\n//                             '@operator': item.operator.value,\n//                             '@value': typeof item.value === 'object' && item.value !== null ? item.value.value : item.value\n//                         }\n//                     });\n//                 }\n//                 if (conditionQuantity && conditionQuantity === 1) {\n//                     newElement['condition'] = {\n//                         '@attribute': conditionElements[0].field.value,\n//                         '@operator': conditionElements[0].operator.value,\n//                         '@value': typeof conditionElements[0].value === 'object' && conditionElements[0].value !== null ? conditionElements[0].value.value : conditionElements[0].value\n//                     }\n//                 }\n//\n//                 const filterElements = filter.items.filter(item => item.logicalType);\n//                 const filterQuantity = filterElements.length;\n//                 if (filterQuantity) {\n//                     newElement['filter'] = parseFilters(filterElements);\n//                 }\n//\n//                 if (filters.length > 1) {\n//                     result.push(newElement);\n//                 } else {\n//                     result = newElement;\n//                 }\n//             } else {\n//                 if (filters.length > 1) {\n//                     result.push({\n//                         '@type': 'and',\n//                         'condition': {\n//                             '@attribute': filter.field.value,\n//                             '@operator': filter.operator.value,\n//                             '@value': typeof filter.value === 'object' && filter.value !== null ? filter.value.value : filter.value\n//                         }\n//                     });\n//                 } else {\n//                     result = {\n//                         '@type': 'and',\n//                         'condition': {\n//                             '@attribute': filter.field.value,\n//                             '@operator': filter.operator.value,\n//                             '@value': typeof filter.value === 'object' && filter.value !== null ? filter.value.value : filter.value\n//                         }\n//                     };\n//                 }\n//             }\n//         });\n//\n//         return result;\n//     };\n//\n//     const filters = newEntities[0].filters;\n//     if (filters.length) {\n//         fetch['fetch']['entity']['filter'] = parseFilters(filters);\n//     }","map":{"version":3,"sources":["/Users/admin/UDS/addons-reportbuilder/src/components/Sidebar/SidebarData/SideBarData.js"],"names":["React","useState","useDispatch","useSelector","setDataSets","NewDataSetList","AnimatedComponent","EntityRow","styled","IconButton","DeleteIcon","EditIcon","isEmpty","DataSetListCont","div","SideBarData","editDataSetId","setEditDataSetId","state","app","dataSets","newDataSet","console","log","dispatch","textAlign","maxHeight","overflow","map","d","i","id","display","flexDirection","margin","fontWeight","dataSetName","entities","e","filter","dataSet"],"mappings":"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CTA,QADS,uBACTA,QAAQ,CAAEmB,MAAV,CAAkBC,OAAD,IAAaA,OAAO,CAACT,EAAR,KAAeF,CAAC,CAACE,EAA/C,CADS,CADL,CAAR;AAKD,OAPH;AAQE,MAAA,SAAS,EAAC,MARZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAUE,oBAAC,UAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAVF,CATF,CAVF,CAFJ;AAqCD,GAjDD,CAFJ,CADF,EAsDG,CAACf,aAAD,iBAAkB,oBAAC,cAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAtDrB,CALF,CADF;AAgED,CA1ED;;AA4EA,eAAeD,WAAf,C,CAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","sourcesContent":["import React, { useState } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { setDataSets } from \"../../../redux/actions/app_action\";\nimport NewDataSetList from \"./NewDataSetList/NewDataSetList\";\nimport { AnimatedComponent } from \"../../views/AnimatedComponent\";\nimport EntityRow from \"./views/EntitiRow\";\n\nimport styled from \"styled-components\";\n\n// MATERIAL UI\n\nimport IconButton from \"@material-ui/core/IconButton\";\nimport DeleteIcon from \"@material-ui/icons/Delete\";\nimport EditIcon from \"@material-ui/icons/Edit\";\n\n// LODASH\n\nimport isEmpty from \"lodash/isEmpty\";\n\nconst DataSetListCont = styled.div`\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  position: relative;\n  flex: 1;\n  margin: 0 10px 20px 15px;\n  font-size: 20px;\n  padding: 10px;\n  box-shadow: 0 3px 3px -2px rgba(0, 0, 0, 0.2);\n  border-radius: 5px;\n  transition: 0.3s;\n  background: #fff;\n  &:hover {\n    cursor: pointer;\n    box-shadow: 0 3px 3px -2px rgba(0, 0, 0, 0.2),\n      0px 3px 4px 0px rgba(0, 0, 0, 0.14), 0px 1px 8px 0px rgba(0, 0, 0, 0.12);\n    transition: 0.3s;\n  }\n`;\n\nconst SideBarData = () => {\n  const [editDataSetId, setEditDataSetId] = useState(null);\n  const state = useSelector((state) => state.app);\n  const { dataSets, newDataSet } = state;\n\n  console.log(dataSets, \"dataSets\");\n  console.log(newDataSet, \"newDataSet\");\n\n  const dispatch = useDispatch();\n\n  return (\n    <AnimatedComponent>\n      <h2 style={{ textAlign: \"center\" }}>\n        {!isEmpty(dataSets) ? \"Data sets list\" : \"Create first DataSet\"}\n      </h2>\n\n      <>\n        <div style={{ maxHeight: \"70vh\", overflow: \"auto\" }}>\n          {!isEmpty(dataSets) &&\n            dataSets.map((d, i) => {\n              if (editDataSetId === d.id) {\n                return (\n                  <NewDataSetList\n                    key={d.id}\n                    editedDataSet={d}\n                    isHiddenControlBtn\n                    setEditDataSetId={setEditDataSetId}\n                  />\n                );\n              }\n\n              return (\n                !editDataSetId && (\n                  <DataSetListCont key={d.id}>\n                    <div style={{ display: \"flex\", flexDirection: \"column\" }}>\n                      <span style={{ margin: \"0 0 5px 0\", fontWeight: 600 }}>\n                        {d.dataSetName}\n                      </span>\n\n                      {d?.entities?.map((e) => {\n                        return <EntityRow key={e.id} entiti={e} />;\n                      })}\n                    </div>\n                    <div>\n                      <IconButton\n                        component=\"span\"\n                        onClick={() => {\n                          setEditDataSetId(d.id);\n                        }}\n                      >\n                        <EditIcon />\n                      </IconButton>\n                      <IconButton\n                        onClick={() => {\n                          dispatch(\n                            setDataSets(\n                              dataSets?.filter((dataSet) => dataSet.id !== d.id)\n                            )\n                          );\n                        }}\n                        component=\"span\"\n                      >\n                        <DeleteIcon />\n                      </IconButton>\n                    </div>\n                  </DataSetListCont>\n                )\n              );\n            })}\n        </div>\n        {!editDataSetId && <NewDataSetList />}\n      </>\n    </AnimatedComponent>\n  );\n};\n\nexport default SideBarData;\n\n// buildFetch = () => {\n//     const newEntities = cloneDeep(this.state.entities);\n//     const fetch = {\n//         'fetch': {\n//             'entity': {\n//                 '@name': newEntities[0].value.value,\n//             }\n//         }\n//     };\n//\n//     // adding 'attribute'\n//\n//     const attributes = newEntities[0].filtersOptions.filter(option => option.type === 'field' && option.chosen);\n//     if (attributes.length && attributes.length > 1) {\n//         fetch['fetch']['entity']['attribute'] = attributes.map(attribute => {\n//             return {\n//                 '@name': attribute.value\n//             }\n//         })\n//     }\n//     if (attributes.length && attributes.length === 1) {\n//         fetch['fetch']['entity']['attribute'] = {\n//             '@name': attributes[0].value\n//         };\n//     }\n//     if (!attributes.length) {\n//         fetch['fetch']['entity']['all-attributes'] = null;\n//     }\n//\n//     // adding 'filter'\n//\n//     const parseFilters = (filters) => {\n//         let result = filters.length > 1 ? [] : {};\n//         filters.forEach(filter => {\n//             if (filter.logicalType) {\n//                 const newElement = {\n//                     '@type': filter.logicalType\n//                 };\n//                 const conditionElements = filter.items.filter(item => !item.logicalType);\n//                 const conditionQuantity = conditionElements.length;\n//                 if (conditionQuantity && conditionQuantity > 1) {\n//                     newElement['condition'] = conditionElements.map(item => {\n//                         return {\n//                             '@attribute': item.field.value,\n//                             '@operator': item.operator.value,\n//                             '@value': typeof item.value === 'object' && item.value !== null ? item.value.value : item.value\n//                         }\n//                     });\n//                 }\n//                 if (conditionQuantity && conditionQuantity === 1) {\n//                     newElement['condition'] = {\n//                         '@attribute': conditionElements[0].field.value,\n//                         '@operator': conditionElements[0].operator.value,\n//                         '@value': typeof conditionElements[0].value === 'object' && conditionElements[0].value !== null ? conditionElements[0].value.value : conditionElements[0].value\n//                     }\n//                 }\n//\n//                 const filterElements = filter.items.filter(item => item.logicalType);\n//                 const filterQuantity = filterElements.length;\n//                 if (filterQuantity) {\n//                     newElement['filter'] = parseFilters(filterElements);\n//                 }\n//\n//                 if (filters.length > 1) {\n//                     result.push(newElement);\n//                 } else {\n//                     result = newElement;\n//                 }\n//             } else {\n//                 if (filters.length > 1) {\n//                     result.push({\n//                         '@type': 'and',\n//                         'condition': {\n//                             '@attribute': filter.field.value,\n//                             '@operator': filter.operator.value,\n//                             '@value': typeof filter.value === 'object' && filter.value !== null ? filter.value.value : filter.value\n//                         }\n//                     });\n//                 } else {\n//                     result = {\n//                         '@type': 'and',\n//                         'condition': {\n//                             '@attribute': filter.field.value,\n//                             '@operator': filter.operator.value,\n//                             '@value': typeof filter.value === 'object' && filter.value !== null ? filter.value.value : filter.value\n//                         }\n//                     };\n//                 }\n//             }\n//         });\n//\n//         return result;\n//     };\n//\n//     const filters = newEntities[0].filters;\n//     if (filters.length) {\n//         fetch['fetch']['entity']['filter'] = parseFilters(filters);\n//     }\n"]},"metadata":{},"sourceType":"module"}