{"ast":null,"code":"var _jsxFileName = \"/Users/admin/UDS/addons-reportbuilder/src/components/Sidebar/SidebarData/NewDataSetList/NewDataSetList.js\";\nimport React, { useEffect, useState } from \"react\";\nimport Button from \"@material-ui/core/Button\";\nimport styled from \"styled-components\"; // material-ui\n\nimport TextField from \"@material-ui/core/TextField\";\nimport { useForm, ErrorMessage } from \"react-hook-form\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { getDataSetEntities } from \"../../../../services/get-entities\";\nimport { savedNewDataSetSettings, setNewDataSetState, setDataSets, setLoading, showAlert } from \"../../../../redux/actions/app_action\";\nimport isEmpty from \"lodash/isEmpty\";\nimport get from \"lodash/get\";\nimport NewEntities from \"../NewEntities\";\nconst NewDataSetComp = styled.div`\n  width: calc(100% - 40px);\n  height: 100%;\n  position: absolute;\n  top: 0;\n  left: 0;\n  padding: 20px;\n  background: aliceblue;\n\n  .save-btn,\n  .close-btn {\n    padding: 5px 15px;\n    border: 1px solid #ccc;\n    border-radius: 4px;\n    box-shadow: 0 3px 3px -2px rgba(0, 0, 0, 0.2),\n      0px 3px 4px 0px rgba(0, 0, 0, 0.14), 0px 1px 8px 0px rgba(0, 0, 0, 0.12);\n    margin: 0 0 0 15px;\n    transition: 0.3s;\n    &:hover {\n      cursor: pointer;\n      background: #ccc;\n      transition: 0.3s;\n    }\n    &:focus {\n      outline: none;\n      background: #ccc;\n    }\n  }\n`;\n\nconst NewDataSetList = ({\n  minNameLength,\n  maxNameLength,\n  editedDataSet,\n  isHiddenControlBtn,\n  setEditDataSetId\n}) => {\n  var _errors$dataSetName, _errors$dataSetName2, _newDataSet$entities;\n\n  const [isOpen, setIsOpen] = useState(false);\n  const [isFullEntitie, setIsFullEntitie] = useState(false);\n  const [isHiddenEditControlBtn, setHiddenEditControlBtn] = useState(isHiddenControlBtn);\n  const state = useSelector(state => state.app);\n  const {\n    dataSets,\n    newDataSet,\n    isShownAlert,\n    isSavedNewDataSetData\n  } = state;\n  const dispatch = useDispatch();\n  console.log(dataSets, \"dataSets\");\n  const {\n    handleSubmit,\n    register,\n    errors,\n    watch,\n    control,\n    onSubmit\n  } = useForm();\n  let dataSetName = watch(\"dataSetName\"); // EDIT DATASET\n\n  useEffect(() => {\n    editedDataSet && dispatch(setNewDataSetState(editedDataSet));\n    editedDataSet && setIsFullEntitie(true);\n  }, [editedDataSet, get(editedDataSet, \"entities\") && editedDataSet.entities.length]); // LOADING DATASETS OPT\n\n  useEffect(() => {\n    async function getDataSet() {\n      dispatch(setLoading(true));\n\n      try {\n        const dataSetTypes = await getDataSetEntities();\n        dispatch(setNewDataSetState({ ...newDataSet,\n          entities: get(newDataSet, \"entities\") ? [{\n            id: new Date().getTime(),\n            dataSetTypes\n          }] : [...(newDataSet === null || newDataSet === void 0 ? void 0 : newDataSet.entities)]\n        }));\n        dispatch(setLoading(false));\n      } catch (e) {\n        console.warn(e);\n      }\n    }\n\n    !editedDataSet && isOpen && getDataSet();\n  }, [isOpen]); // SET DATASET NAME\n\n  useEffect(() => {\n    if (dataSetName) {\n      dispatch(setNewDataSetState({ ...newDataSet,\n        dataSetName\n      }));\n      dispatch(savedNewDataSetSettings(false));\n    }\n  }, [dataSetName]);\n\n  if (!isOpen && isSavedNewDataSetData && !isHiddenEditControlBtn) {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      style: {\n        position: \"absolute\",\n        left: \"50%\",\n        transform: \"translateX(-50%)\",\n        bottom: \"60px\"\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 140,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(Button, {\n      onClick: () => {\n        setIsOpen(true);\n        dispatch(setNewDataSetState({\n          id: new Date().getTime(),\n          entities: [{\n            id: new Date().getTime()\n          }]\n        }));\n      },\n      variant: \"contained\",\n      color: \"primary\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 148,\n        columnNumber: 9\n      }\n    }, \"New dataset\"));\n  }\n\n  return /*#__PURE__*/React.createElement(NewDataSetComp, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 168,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"form\", {\n    onSubmit: handleSubmit(onSubmit),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 169,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(TextField, {\n    error: (errors === null || errors === void 0 ? void 0 : (_errors$dataSetName = errors.dataSetName) === null || _errors$dataSetName === void 0 ? void 0 : _errors$dataSetName.type) || (errors === null || errors === void 0 ? void 0 : (_errors$dataSetName2 = errors.dataSetName) === null || _errors$dataSetName2 === void 0 ? void 0 : _errors$dataSetName2.message) || (errors === null || errors === void 0 ? void 0 : errors.dataSetName),\n    register: register,\n    required: true,\n    style: {\n      width: \"100%\",\n      margin: \"0 0 15px 0\"\n    },\n    label: \"Name\",\n    name: \"dataSetName\",\n    value: dataSetName || get(editedDataSet, \"dataSetName\"),\n    inputRef: register({\n      validate: value => {\n        return isEmpty(dataSets.filter(d => {\n          if (d.dataSetName === get(editedDataSet, \"dataSetName\")) {\n            return false;\n          }\n\n          return d.dataSetName === value;\n        }));\n      },\n      maxLength: {\n        value: maxNameLength,\n        message: \"Max 20 letters\"\n      },\n      minLength: {\n        value: minNameLength,\n        message: \"Min 4 letters\"\n      }\n    }),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 170,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(\"div\", {\n    style: {\n      margin: \"0 0 10px 0\",\n      fontSize: \"12px\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 208,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(ErrorMessage, {\n    errors: errors,\n    name: \"dataSetName\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 214,\n      columnNumber: 11\n    }\n  }), errors.dataSetName && errors.dataSetName.type === \"validate\" && \"Data set name already exists!\"), get(newDataSet, \"entities\") && (newDataSet === null || newDataSet === void 0 ? void 0 : (_newDataSet$entities = newDataSet.entities) === null || _newDataSet$entities === void 0 ? void 0 : _newDataSet$entities.map(e => {\n    return /*#__PURE__*/React.createElement(NewEntities, {\n      register: register,\n      control: control,\n      key: e.id,\n      entitie: e,\n      setIsFullEntitie: setIsFullEntitie,\n      isFullEntitie: isFullEntitie,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 224,\n        columnNumber: 15\n      }\n    });\n  })), /*#__PURE__*/React.createElement(\"div\", {\n    style: {\n      display: \"flex\",\n      justifyContent: \"flex-end\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 235,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"input\", {\n    type: \"submit\",\n    className: \"save-btn\",\n    value: \"Save\",\n    onClick: () => {\n      if (dataSetName && dataSetName.length >= minNameLength && dataSetName.length <= maxNameLength && isFullEntitie && isEmpty(dataSets.filter(d => {\n        if (d.dataSetName === get(editedDataSet, \"dataSetName\")) {\n          return false;\n        }\n\n        return d.dataSetName === dataSetName;\n      }))) {\n        dispatch(savedNewDataSetSettings(true));\n        dispatch(setDataSets(editedDataSet ? dataSets.map(d => {\n          return (d === null || d === void 0 ? void 0 : d.id) === (editedDataSet === null || editedDataSet === void 0 ? void 0 : editedDataSet.id) ? newDataSet : d;\n        }) : [...dataSets, newDataSet]));\n        editedDataSet && setHiddenEditControlBtn(false);\n        editedDataSet && setEditDataSetId(null);\n        isShownAlert && dispatch(showAlert(false));\n        dispatch(setNewDataSetState({}));\n        setIsOpen(false);\n        setIsFullEntitie(false);\n      }\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 241,\n      columnNumber: 11\n    }\n  }), /*#__PURE__*/React.createElement(\"button\", {\n    className: \"close-btn\",\n    onClick: () => {\n      isShownAlert && dispatch(showAlert(false));\n      dispatch(savedNewDataSetSettings(true));\n      setIsOpen(false);\n      dispatch(setNewDataSetState({}));\n      editedDataSet && setEditDataSetId(null);\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 279,\n      columnNumber: 11\n    }\n  }, \"Close\"))));\n};\n\nNewDataSetList.defaultProps = {\n  minNameLength: 4,\n  maxNameLength: 20,\n  hideNewBtn: false\n};\nexport default NewDataSetList;","map":{"version":3,"sources":["/Users/admin/UDS/addons-reportbuilder/src/components/Sidebar/SidebarData/NewDataSetList/NewDataSetList.js"],"names":["React","useEffect","useState","Button","styled","TextField","useForm","ErrorMessage","useSelector","useDispatch","getDataSetEntities","savedNewDataSetSettings","setNewDataSetState","setDataSets","setLoading","showAlert","isEmpty","get","NewEntities","NewDataSetComp","div","NewDataSetList","minNameLength","maxNameLength","editedDataSet","isHiddenControlBtn","setEditDataSetId","isOpen","setIsOpen","isFullEntitie","setIsFullEntitie","isHiddenEditControlBtn","setHiddenEditControlBtn","state","app","dataSets","newDataSet","isShownAlert","isSavedNewDataSetData","dispatch","console","log","handleSubmit","register","errors","watch","control","onSubmit","dataSetName","entities","length","getDataSet","dataSetTypes","id","Date","getTime","e","warn","position","left","transform","bottom","type","message","width","margin","validate","value","filter","d","maxLength","minLength","fontSize","map","display","justifyContent","defaultProps","hideNewBtn"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from \"react\";\n\nimport Button from \"@material-ui/core/Button\";\nimport styled from \"styled-components\";\n\n// material-ui\n\nimport TextField from \"@material-ui/core/TextField\";\n\nimport { useForm, ErrorMessage } from \"react-hook-form\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { getDataSetEntities } from \"../../../../services/get-entities\";\nimport {\n  savedNewDataSetSettings,\n  setNewDataSetState,\n  setDataSets,\n  setLoading,\n  showAlert,\n} from \"../../../../redux/actions/app_action\";\n\nimport isEmpty from \"lodash/isEmpty\";\nimport get from \"lodash/get\";\nimport NewEntities from \"../NewEntities\";\n\nconst NewDataSetComp = styled.div`\n  width: calc(100% - 40px);\n  height: 100%;\n  position: absolute;\n  top: 0;\n  left: 0;\n  padding: 20px;\n  background: aliceblue;\n\n  .save-btn,\n  .close-btn {\n    padding: 5px 15px;\n    border: 1px solid #ccc;\n    border-radius: 4px;\n    box-shadow: 0 3px 3px -2px rgba(0, 0, 0, 0.2),\n      0px 3px 4px 0px rgba(0, 0, 0, 0.14), 0px 1px 8px 0px rgba(0, 0, 0, 0.12);\n    margin: 0 0 0 15px;\n    transition: 0.3s;\n    &:hover {\n      cursor: pointer;\n      background: #ccc;\n      transition: 0.3s;\n    }\n    &:focus {\n      outline: none;\n      background: #ccc;\n    }\n  }\n`;\n\nconst NewDataSetList = ({\n  minNameLength,\n  maxNameLength,\n  editedDataSet,\n  isHiddenControlBtn,\n  setEditDataSetId,\n}) => {\n  const [isOpen, setIsOpen] = useState(false);\n  const [isFullEntitie, setIsFullEntitie] = useState(false);\n  const [isHiddenEditControlBtn, setHiddenEditControlBtn] = useState(\n    isHiddenControlBtn\n  );\n\n  const state = useSelector((state) => state.app);\n  const { dataSets, newDataSet, isShownAlert, isSavedNewDataSetData } = state;\n  const dispatch = useDispatch();\n\n  console.log(dataSets, \"dataSets\");\n\n  const {\n    handleSubmit,\n    register,\n    errors,\n    watch,\n    control,\n    onSubmit,\n  } = useForm();\n\n  let dataSetName = watch(\"dataSetName\");\n\n  // EDIT DATASET\n\n  useEffect(() => {\n    editedDataSet && dispatch(setNewDataSetState(editedDataSet));\n    editedDataSet && setIsFullEntitie(true);\n  }, [\n    editedDataSet,\n    get(editedDataSet, \"entities\") && editedDataSet.entities.length,\n  ]);\n\n  // LOADING DATASETS OPT\n\n  useEffect(() => {\n    async function getDataSet() {\n      dispatch(setLoading(true));\n      try {\n        const dataSetTypes = await getDataSetEntities();\n\n        dispatch(\n          setNewDataSetState({\n            ...newDataSet,\n            entities: get(newDataSet, \"entities\")\n              ? [\n                  {\n                    id: new Date().getTime(),\n                    dataSetTypes,\n                  },\n                ]\n              : [...newDataSet?.entities],\n          })\n        );\n        dispatch(setLoading(false));\n      } catch (e) {\n        console.warn(e);\n      }\n    }\n    !editedDataSet && isOpen && getDataSet();\n  }, [isOpen]);\n\n  // SET DATASET NAME\n\n  useEffect(() => {\n    if (dataSetName) {\n      dispatch(\n        setNewDataSetState({\n          ...newDataSet,\n          dataSetName,\n        })\n      );\n      dispatch(savedNewDataSetSettings(false));\n    }\n  }, [dataSetName]);\n\n  if (!isOpen && isSavedNewDataSetData && !isHiddenEditControlBtn) {\n    return (\n      <div\n        style={{\n          position: \"absolute\",\n          left: \"50%\",\n          transform: \"translateX(-50%)\",\n          bottom: \"60px\",\n        }}\n      >\n        <Button\n          onClick={() => {\n            setIsOpen(true);\n            dispatch(\n              setNewDataSetState({\n                id: new Date().getTime(),\n                entities: [{ id: new Date().getTime() }],\n              })\n            );\n          }}\n          variant=\"contained\"\n          color=\"primary\"\n        >\n          New dataset\n        </Button>\n      </div>\n    );\n  }\n\n  return (\n    <NewDataSetComp>\n      <form onSubmit={handleSubmit(onSubmit)}>\n        <TextField\n          error={\n            errors?.dataSetName?.type ||\n            errors?.dataSetName?.message ||\n            errors?.dataSetName\n          }\n          register={register}\n          required\n          style={{\n            width: \"100%\",\n            margin: \"0 0 15px 0\",\n          }}\n          label=\"Name\"\n          name=\"dataSetName\"\n          value={dataSetName || get(editedDataSet, \"dataSetName\")}\n          inputRef={register({\n            validate: (value) => {\n              return isEmpty(\n                dataSets.filter((d) => {\n                  if (d.dataSetName === get(editedDataSet, \"dataSetName\")) {\n                    return false;\n                  }\n\n                  return d.dataSetName === value;\n                })\n              );\n            },\n            maxLength: {\n              value: maxNameLength,\n              message: \"Max 20 letters\",\n            },\n            minLength: {\n              value: minNameLength,\n              message: \"Min 4 letters\",\n            },\n          })}\n        />\n\n        <div\n          style={{\n            margin: \"0 0 10px 0\",\n            fontSize: \"12px\",\n          }}\n        >\n          <ErrorMessage errors={errors} name=\"dataSetName\" />\n\n          {errors.dataSetName &&\n            errors.dataSetName.type === \"validate\" &&\n            \"Data set name already exists!\"}\n        </div>\n\n        {get(newDataSet, \"entities\") &&\n          newDataSet?.entities?.map((e) => {\n            return (\n              <NewEntities\n                register={register}\n                control={control}\n                key={e.id}\n                entitie={e}\n                setIsFullEntitie={setIsFullEntitie}\n                isFullEntitie={isFullEntitie}\n              />\n            );\n          })}\n\n        <div\n          style={{\n            display: \"flex\",\n            justifyContent: \"flex-end\",\n          }}\n        >\n          <input\n            type=\"submit\"\n            className=\"save-btn\"\n            value=\"Save\"\n            onClick={() => {\n              if (\n                dataSetName &&\n                dataSetName.length >= minNameLength &&\n                dataSetName.length <= maxNameLength &&\n                isFullEntitie &&\n                isEmpty(\n                  dataSets.filter((d) => {\n                    if (d.dataSetName === get(editedDataSet, \"dataSetName\")) {\n                      return false;\n                    }\n                    return d.dataSetName === dataSetName;\n                  })\n                )\n              ) {\n                dispatch(savedNewDataSetSettings(true));\n                dispatch(\n                  setDataSets(\n                    editedDataSet\n                      ? dataSets.map((d) => {\n                          return d?.id === editedDataSet?.id ? newDataSet : d;\n                        })\n                      : [...dataSets, newDataSet]\n                  )\n                );\n                editedDataSet && setHiddenEditControlBtn(false);\n                editedDataSet && setEditDataSetId(null);\n                isShownAlert && dispatch(showAlert(false));\n                dispatch(setNewDataSetState({}));\n                setIsOpen(false);\n                setIsFullEntitie(false);\n              }\n            }}\n          />\n          <button\n            className=\"close-btn\"\n            onClick={() => {\n              isShownAlert && dispatch(showAlert(false));\n              dispatch(savedNewDataSetSettings(true));\n              setIsOpen(false);\n              dispatch(setNewDataSetState({}));\n              editedDataSet && setEditDataSetId(null);\n            }}\n          >\n            Close\n          </button>\n        </div>\n      </form>\n    </NewDataSetComp>\n  );\n};\n\nNewDataSetList.defaultProps = {\n  minNameLength: 4,\n  maxNameLength: 20,\n  hideNewBtn: false,\n};\n\nexport default NewDataSetList;\n"]},"metadata":{},"sourceType":"module"}